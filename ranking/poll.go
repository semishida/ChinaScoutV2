package ranking

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// Poll –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å.
type Poll struct {
	ID       string         // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π 5-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID –æ–ø—Ä–æ—Å–∞
	Question string         // –í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
	Options  []string       // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
	Bets     map[string]int // –°—Ç–∞–≤–∫–∏: userID -> —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
	Choices  map[string]int // –í—ã–±–æ—Ä: userID -> –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1, 2, ...)
	Active   bool           // –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
	Creator  string         // ID –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –æ–ø—Ä–æ—Å
	Created  time.Time      // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
}

// splitCommand —Ä–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö.
func splitCommand(command string) []string {
	var parts []string
	var current strings.Builder
	inBrackets := false

	for _, r := range command {
		if r == '[' {
			inBrackets = true
			current.WriteRune(r)
		} else if r == ']' {
			inBrackets = false
			current.WriteRune(r)
		} else if r == ' ' && !inBrackets {
			if current.Len() > 0 {
				parts = append(parts, current.String())
				current.Reset()
			}
		} else {
			current.WriteRune(r)
		}
	}
	if current.Len() > 0 {
		parts = append(parts, current.String())
	}
	return parts
}

// GetCoefficients –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø—Ä–æ—Å–∞.
func (p *Poll) GetCoefficients() []float64 {
	totalBet := 0
	optionBets := make([]int, len(p.Options))

	for _, bet := range p.Bets {
		totalBet += bet
	}
	for userID, choice := range p.Choices {
		if choice > 0 && choice <= len(optionBets) {
			optionBets[choice-1] += p.Bets[userID]
		}
	}

	coefficients := make([]float64, len(p.Options))
	for i := range p.Options {
		if optionBets[i] == 0 {
			coefficients[i] = 0
		} else {
			coefficients[i] = float64(totalBet) / float64(optionBets[i])
		}
	}
	return coefficients
}

// HandlePollCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.
func (r *Ranking) HandlePollCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !cpoll: %s –æ—Ç %s", command, m.Author.ID)

	parts := splitCommand(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!cpoll –í–æ–ø—Ä–æ—Å [–í–∞—Ä–∏–∞–Ω—Ç1] [–í–∞—Ä–∏–∞–Ω—Ç2] ...`")
		return
	}

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∏—â–∏-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã! üîí")
		return
	}

	var questionParts []string
	var options []string
	for _, part := range parts[1:] {
		if strings.HasPrefix(part, "[") && strings.HasSuffix(part, "]") {
			trimmed := strings.Trim(part, "[]")
			if trimmed != "" {
				options = append(options, trimmed)
			}
		} else {
			questionParts = append(questionParts, part)
		}
	}
	question := strings.Join(questionParts, " ")
	if question == "" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üìù")
		return
	}

	if len(options) < 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞! üìä")
		return
	}

	pollID := generatePollID()
	r.mu.Lock()
	r.polls[pollID] = &Poll{
		ID:       pollID,
		Question: question,
		Options:  options,
		Bets:     make(map[string]int),
		Choices:  make(map[string]int),
		Active:   true,
		Creator:  m.Author.ID,
		Created:  time.Now(),
	}
	r.mu.Unlock()

	response := fmt.Sprintf("üéâ **–û–ø—Ä–æ—Å %s –∑–∞–ø—É—â–µ–Ω!**\n<@%s> —Å–æ–∑–¥–∞–ª –æ–ø—Ä–æ—Å: **%s**\n\nüìã **–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n", pollID, m.Author.ID, question)
	for i, opt := range options {
		response += fmt.Sprintf("%d. [%s]\n", i+1, opt)
	}
	response += fmt.Sprintf("\nüí∏ –°—Ç–∞–≤—å—Ç–µ: `!dep %s <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>`\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ: `!closedep %s <–Ω–æ–º–µ—Ä>`", pollID, pollID)
	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("–û–ø—Ä–æ—Å %s —Å–æ–∑–¥–∞–Ω %s: %s —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ %v", pollID, m.Author.ID, question, options)
}

// HandleDepCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ–ø—Ä–æ—Å.
func (r *Ranking) HandleDepCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !dep: %s –æ—Ç %s", command, m.Author.ID)

	parts := splitCommand(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!dep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>`")
		return
	}

	pollID := parts[1]
	option, err := strconv.Atoi(parts[2])
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! üî¢")
		return
	}

	amount, err := strconv.Atoi(parts[3])
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	r.mu.Lock()
	poll, exists := r.polls[pollID]
	if !exists || !poll.Active {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç! üîí")
		r.mu.Unlock()
		return
	}

	if option < 1 || option > len(poll.Options) {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ %d! üìä", len(poll.Options)))
		r.mu.Unlock()
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d üí∞", userRating))
		r.mu.Unlock()
		return
	}

	r.UpdateRating(m.Author.ID, -amount)
	if _, exists := poll.Bets[m.Author.ID]; exists {
		poll.Bets[m.Author.ID] += amount
	} else {
		poll.Bets[m.Author.ID] = amount
	}
	poll.Choices[m.Author.ID] = option
	r.mu.Unlock()

	coefficients := poll.GetCoefficients()
	coefficient := coefficients[option-1]

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üé≤ <@%s> –ø–æ—Å—Ç–∞–≤–∏–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ [%s] –≤ –æ–ø—Ä–æ—Å–µ **%s** üìä\n**üìà –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** %.2f", m.Author.ID, amount, poll.Options[option-1], poll.Question, coefficient))
	r.LogCreditOperation(s, fmt.Sprintf("<@%s> –ø–æ—Å—Ç–∞–≤–∏–ª %d —Å–æ—Ü –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å %s", pollID))
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ—Å—Ç–∞–≤–∏–ª %d –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç %d –≤ –æ–ø—Ä–æ—Å–µ %s, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: %.2f", m.Author.ID, amount, option, pollID, coefficient)
}

// HandleCloseDepCommand –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∏.
func (r *Ranking) HandleCloseDepCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !closedep: %s –æ—Ç %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!closedep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ_–≤–∞—Ä–∏–∞–Ω—Ç–∞>`")
		return
	}

	pollID := parts[1]
	winningOptionStr := strings.Trim(parts[2], "<>[]")
	winningOption, err := strconv.Atoi(winningOptionStr)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! üî¢")
		return
	}

	r.mu.Lock()
	poll, exists := r.polls[pollID]
	if !exists {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! üìä")
		r.mu.Unlock()
		return
	}
	if !poll.Active {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç! üîí")
		r.mu.Unlock()
		return
	}

	if m.Author.ID != poll.Creator {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å! üîê")
		r.mu.Unlock()
		return
	}

	if winningOption < 1 || winningOption > len(poll.Options) {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ %d! üìä", len(poll.Options)))
		r.mu.Unlock()
		return
	}

	totalBet := 0
	winnersBet := 0
	for _, bet := range poll.Bets {
		totalBet += bet
	}
	for userID, choice := range poll.Choices {
		if choice == winningOption {
			winnersBet += poll.Bets[userID]
		}
	}

	var coefficient float64
	if winnersBet == 0 {
		coefficient = 0
	} else {
		coefficient = float64(totalBet) / float64(winnersBet)
	}

	response := fmt.Sprintf("‚úÖ **–û–ø—Ä–æ—Å %s –∑–∞–≤–µ—Ä—à—ë–Ω!** üèÜ\n–ü–æ–±–µ–¥–∏–ª: **%s** (‚Ññ%d)\nüìà **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** %.2f\n\nüéâ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n", pollID, poll.Options[winningOption-1], winningOption, coefficient)
	for userID, choice := range poll.Choices {
		if choice == winningOption {
			winnings := int(float64(poll.Bets[userID]) * coefficient)
			r.UpdateRating(userID, winnings+poll.Bets[userID])
			response += fmt.Sprintf("<@%s>: %d –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Å—Ç–∞–≤–∫–∞: %d) üí∞\n", userID, winnings+poll.Bets[userID], poll.Bets[userID])
			r.LogCreditOperation(s, fmt.Sprintf("<@%s> –≤—ã–∏–≥—Ä–∞–ª %d —Å–æ—Ü –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–µ %s", userID, winnings+poll.Bets[userID], pollID))
		}
	}
	if winnersBet == 0 {
		response += "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª! üò¢"
	}

	poll.Active = false
	r.mu.Unlock()

	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("–û–ø—Ä–æ—Å %s –∑–∞–∫—Ä—ã—Ç %s, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: %s, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: %.2f", pollID, m.Author.ID, poll.Options[winningOption-1], coefficient)
}

// HandlePollsCommand –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã.
func (r *Ranking) HandlePollsCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !polls: %s –æ—Ç %s", m.Content, m.Author.ID)

	r.mu.Lock()
	defer r.mu.Unlock()

	if len(r.polls) == 0 {
		s.ChannelMessageSend(m.ChannelID, "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤! –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é `!cpoll`! üéâ")
		return
	}

	response := "üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:**\n"
	for pollID, poll := range r.polls {
		if !poll.Active {
			continue
		}
		response += fmt.Sprintf("\n**–û–ø—Ä–æ—Å %s: %s** üéâ\n", pollID, poll.Question)
		coefficients := poll.GetCoefficients()
		for i, option := range poll.Options {
			response += fmt.Sprintf("üìã –í–∞—Ä–∏–∞–Ω—Ç %d. [%s] (üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: %.2f)\n", i+1, option, coefficients[i])
			for userID, choice := range poll.Choices {
				if choice == i+1 {
					bet := poll.Bets[userID]
					potentialWin := int(float64(bet) * coefficients[i])
					response += fmt.Sprintf("  - <@%s>: %d –∫—Ä–µ–¥–∏—Ç–æ–≤ (üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: %d)\n", userID, bet, potentialWin+bet)
				}
			}
		}
	}

	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("–°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω %s", m.Author.ID)
}

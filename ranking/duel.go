package ranking

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// Duel –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏.
type Duel struct {
	DuelID       string
	ChallengerID string
	OpponentID   string
	Bet          int
	Active       bool
	ChannelID    string
	MessageID    string
	Created      time.Time
}

// HandleDuelCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !duel.
func (r *Ranking) HandleDuelCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !duel: %s –æ—Ç %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) != 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `/duel <—Å—É–º–º–∞>`")
		return
	}

	bet, err := strconv.Atoi(parts[1])
	if err != nil || bet <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < bet {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	duelID := generateGameID(m.Author.ID)
	r.mu.Lock()
	duel := &Duel{
		DuelID:       duelID,
		ChallengerID: m.Author.ID,
		Bet:          bet,
		Active:       true,
		ChannelID:    m.ChannelID,
		Created:      time.Now(),
	}
	r.duels[duelID] = duel
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚öîÔ∏è –î—É—ç–ª—å! ‚öîÔ∏è",
		Description: fmt.Sprintf("<@%s> –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å —Å —Å—Ç–∞–≤–∫–æ–π **%d** –∫—Ä–µ–¥–∏—Ç–æ–≤! üí∏\n\n–ù–∞–∂–º–∏ **–ü—Ä–∏–Ω—è—Ç—å**, —á—Ç–æ–±—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è!", m.Author.ID, bet),
		Color:       randomColor(),
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–¢–æ–ª—å–∫–æ —Å–º–µ–ª—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤—ã–∑–æ–≤! üõ°Ô∏è",
		},
	}
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "–ü—Ä–∏–Ω—è—Ç—å üõ°Ô∏è",
					Style:    discordgo.PrimaryButton,
					CustomID: fmt.Sprintf("duel_accept_%s", duelID),
				},
			},
		},
	}

	msg, err := s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Embed:      embed,
		Components: components,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É—ç–ª–∏: %v", err)
		return
	}

	r.mu.Lock()
	duel.MessageID = msg.ID
	r.mu.Unlock()

	go r.duelTimeout(s, duelID)
}

// HandleDuelAccept –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å".
func (r *Ranking) HandleDuelAccept(s *discordgo.Session, i *discordgo.InteractionCreate) {
	customID := i.MessageComponentData().CustomID
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥—É—ç–ª–∏, CustomID: %s", customID)

	if !strings.HasPrefix(customID, "duel_accept_") {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}

	duelID := strings.TrimPrefix(customID, "duel_accept_")
	log.Printf("–ò–∑–≤–ª–µ—á—ë–Ω duelID: %s", duelID)

	r.mu.Lock()
	duel, exists := r.duels[duelID]
	if !exists {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if !duel.Active {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –î—É—ç–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if i.Member.User.ID == duel.ChallengerID {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –¥—É—ç–ª—å!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	opponentRating := r.GetRating(i.Member.User.ID)
	if opponentRating < duel.Bet {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", opponentRating), Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	duel.OpponentID = i.Member.User.ID
	duel.Active = false
	r.mu.Unlock()

	r.UpdateRating(duel.ChallengerID, -duel.Bet)
	r.UpdateRating(duel.OpponentID, -duel.Bet)

	rand.Seed(time.Now().UnixNano())
	winnerID := duel.ChallengerID
	loserID := duel.OpponentID
	if rand.Intn(2) == 1 {
		winnerID, loserID = loserID, winnerID
	}

	winnings := duel.Bet * 2
	r.UpdateRating(winnerID, winnings)
	r.UpdateDuelStats(winnerID, true)
	r.UpdateDuelStats(loserID, false)

	embed := &discordgo.MessageEmbed{
		Title:       "‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚öîÔ∏è",
		Description: fmt.Sprintf("<@%s> –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ <@%s>!\n\nüèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** <@%s> (+%d –∫—Ä–µ–¥–∏—Ç–æ–≤)\nüò¢ **–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** <@%s> (-%d –∫—Ä–µ–¥–∏—Ç–æ–≤)", duel.OpponentID, duel.ChallengerID, winnerID, winnings, loserID, duel.Bet),
		Color:       randomColor(),
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞! üëë",
		},
	}

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    duel.ChannelID,
		ID:         duel.MessageID,
		Embed:      embed,
		Components: &[]discordgo.MessageComponent{},
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É—ç–ª–∏: %v", err)
	}

	r.LogCreditOperation(s, fmt.Sprintf("<@%s> –≤—ã–∏–≥—Ä–∞–ª %d —Å–æ—Ü –∫—Ä–µ–¥–∏—Ç–æ–≤ —É <@%s> –≤ –¥—É—ç–ª–∏", winnerID, winnings, loserID))

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})

	r.mu.Lock()
	delete(r.duels, duelID)
	r.mu.Unlock()
}

// duelTimeout –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥—É—ç–ª—å –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.
func (r *Ranking) duelTimeout(s *discordgo.Session, duelID string) {
	time.Sleep(15 * time.Minute)
	r.mu.Lock()
	duel, exists := r.duels[duelID]
	if !exists || !duel.Active {
		r.mu.Unlock()
		return
	}
	duel.Active = false
	delete(r.duels, duelID)
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚öîÔ∏è –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞! ‚öîÔ∏è",
		Description: fmt.Sprintf("–î—É—ç–ª—å <@%s> –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞! ‚è∞", duel.ChallengerID),
		Color:       randomColor(),
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! üò¢",
		},
	}
	_, err := s.ChannelMessageEditEmbed(duel.ChannelID, duel.MessageID, embed)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É—ç–ª–∏ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: %v", err)
	}
}

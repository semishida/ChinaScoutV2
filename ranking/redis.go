package ranking

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/go-redis/redis/v8"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥.
type User struct {
	ID           string `json:"id"`
	Rating       int    `json:"rating"`
	DuelsPlayed  int    `json:"duels_played"`
	DuelsWon     int    `json:"duels_won"`
	RBPlayed     int    `json:"rb_played"`
	RBWon        int    `json:"rb_won"`
	BJPlayed     int    `json:"bj_played"`
	BJWon        int    `json:"bj_won"`
	VoiceSeconds int    `json:"voice_seconds"`
}

// GetRating –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis.
func (r *Ranking) GetRating(userID string) int {
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == redis.Nil {
			return 0
		}
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		var user User
		if err := json.Unmarshal([]byte(data), &user); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
			return 0
		}
		return user.Rating
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è %s –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
	return 0
}

// UpdateRating –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis.
func (r *Ranking) UpdateRating(userID string, points int) {
	user := User{ID: userID}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	oldRating := user.Rating
	user.Rating += points
	if user.Rating < 0 {
		user.Rating = 0
	}

	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		log.Printf("–û–±–Ω–æ–≤–ª—ë–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è %s: %d (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: %d)", userID, user.Rating, points)
		// –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ LOG_CHANNEL_ID
		s, err := discordgo.New("Bot " + os.Getenv("DISCORD_TOKEN"))
		if err == nil {
			if points == 1 { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ +1 ‚Äî —ç—Ç–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
				r.LogCreditOperation(s, fmt.Sprintf("<@%s> –ø–æ–ª—É—á–∏–ª +1 –∫—Ä–µ–¥–∏—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–æ–π—Å–µ %d -> %d", userID, oldRating, user.Rating))
			} else {
				r.LogCreditOperation(s, fmt.Sprintf("üí∞ <@%s> –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å: %d ‚Üí %d (%+d –∫—Ä–µ–¥–∏—Ç–æ–≤)", userID, oldRating, user.Rating, points))
			}
		}
		return
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
	if r.floodChannelID != "" {
		s, err := discordgo.New("Bot " + os.Getenv("DISCORD_TOKEN"))
		if err == nil {
			s.ChannelMessageSend(r.floodChannelID, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Redis-—Å–µ—Ä–≤–µ—Ä.")
		}
	}
}

// UpdateDuelStats –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É—ç–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (r *Ranking) UpdateDuelStats(userID string, won bool) {
	user := User{ID: userID}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	user.DuelsPlayed++
	if won {
		user.DuelsWon++
	}

	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π –¥–ª—è %s: —Å—ã–≥—Ä–∞–Ω–æ %d, –≤—ã–∏–≥—Ä–∞–Ω–æ %d", userID, user.DuelsPlayed, user.DuelsWon)
		return
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
}

// UpdateRBStats –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RedBlack.
func (r *Ranking) UpdateRBStats(userID string, won bool) {
	user := User{ID: userID}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	user.RBPlayed++
	if won {
		user.RBWon++
	}

	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RedBlack –¥–ª—è %s: —Å—ã–≥—Ä–∞–Ω–æ %d, –≤—ã–∏–≥—Ä–∞–Ω–æ %d", userID, user.RBPlayed, user.RBWon)
		return
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
}

// UpdateBJStats –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Blackjack.
func (r *Ranking) UpdateBJStats(userID string, won bool) {
	user := User{ID: userID}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	user.BJPlayed++
	if won {
		user.BJWon++
	}

	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Blackjack –¥–ª—è %s: —Å—ã–≥—Ä–∞–Ω–æ %d, –≤—ã–∏–≥—Ä–∞–Ω–æ %d", userID, user.BJPlayed, user.BJWon)
		return
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
}

// UpdateVoiceSeconds –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
func (r *Ranking) UpdateVoiceSeconds(userID string, seconds int) {
	user := User{ID: userID}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	user.VoiceSeconds += seconds

	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		//log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è %s: %d —Å–µ–∫—É–Ω–¥", userID)
		return
	}
	log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", userID)
}

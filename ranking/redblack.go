package ranking

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// RedBlackGame –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É RedBlack.
type RedBlackGame struct {
	GameID        string
	PlayerID      string
	Bet           int
	Choice        string
	Active        bool
	MenuMessageID string
	Color         int
}

// StartRBGame –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É RedBlack.
func (r *Ranking) StartRBGame(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–ó–∞–ø—É—Å–∫ StartRBGame –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", m.Author.ID)

	r.mu.Lock()
	gameID := generateGameID(m.Author.ID)
	color := randomColor()
	game := &RedBlackGame{
		GameID:   gameID,
		PlayerID: m.Author.ID,
		Active:   true,
		Color:    color,
	}
	r.redBlackGames[gameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("–í–µ–ª–∫–æ–º, <@%s>! ü•≥\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≤–µ–ª–∏—Ç: –≤—ã–±–∏—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π!\n\n**üí∞ –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ü–∏—à–∏ –≤–æ—Ç: `/rb <red/black> <—Å—É–º–º–∞>`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/rb red 50`\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π! üëë", m.Author.ID, r.GetRating(m.Author.ID)),
		Color:       color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	msg, err := s.ChannelMessageSendEmbed(m.ChannelID, embed)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é RB: %v", err)
		return
	}

	r.mu.Lock()
	game.MenuMessageID = msg.ID
	r.mu.Unlock()

	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		if g, exists := r.redBlackGames[gameID]; exists && g.Active {
			g.Active = false
			delete(r.redBlackGames, gameID)
			embed := &discordgo.MessageEmbed{
				Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
				Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏, <@%s>! –í—Ä–µ–º—è –Ω–µ—Ç—É. ‚è∞\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°", m.Author.ID),
				Color:       color,
				Footer: &discordgo.MessageEmbedFooter{
					Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! ‚è∞",
				},
			}
			_, err := s.ChannelMessageEditEmbed(channelID, messageID, embed)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ RB –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: %v", err)
			}
		}
		r.mu.Unlock()
	}(msg.ID, m.ChannelID)
}

// HandleRBCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–≤–∫–∏ –≤ –∏–≥—Ä–µ RedBlack.
func (r *Ranking) HandleRBCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) < 3 {
		r.sendTemporaryReply(s, m, "‚ùå –ü–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: `/rb <red/black> <—Å—É–º–º–∞>`")
		return
	}

	choice := strings.ToLower(parts[1])
	if choice != "red" && choice != "black" {
		r.sendTemporaryReply(s, m, "‚ùå –í—ã–±–∏—Ä–∞—Ç—å –Ω–∞–¥–æ `red` –∏–ª–∏ `black`! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∂–¥—ë—Ç! üëë")
		return
	}

	amount, err := strconv.Atoi(parts[2])
	if err != nil || amount <= 0 {
		r.sendTemporaryReply(s, m, "‚ùå –°—É–º–º–∞ –Ω–∞–¥–æ —á–∏—Å–ª–æ —Ö–æ—Ä–æ—à–µ–µ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ª—é–±–∏—Ç —à—É—Ç–∫–∏! üò°")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		r.sendTemporaryReply(s, m, fmt.Sprintf("‚ùå –ö—Ä–µ–¥–∏—Ç–æ–≤ –º–∞–ª–æ! –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è: %d üò¢ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–∞—Å—Ç –≤–∑–∞–π–º—ã!", userRating))
		return
	}

	r.mu.Lock()
	var game *RedBlackGame
	for _, g := range r.redBlackGames {
		if g.PlayerID == m.Author.ID && g.Active && g.Bet == 0 {
			game = g
			break
		}
	}
	if game == nil {
		r.sendTemporaryReply(s, m, "‚ùå –ò–≥—Ä—É –Ω–∞—á–∏–Ω–∞–π —Å `/rb`! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∂–¥—ë—Ç —Ç–µ–±—è! üëë")
		r.mu.Unlock()
		return
	}

	game.Bet = amount
	game.Choice = choice
	r.mu.Unlock()

	r.UpdateRating(m.Author.ID, -amount)

	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –ö—Ä—É—Ç–∏–º-–∫—Ä—É—Ç–∏–º... –ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–º–æ—Ç—Ä–∏—Ç! üëë", m.Author.ID, amount, choice),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel: m.ChannelID,
		ID:      game.MenuMessageID,
		Embed:   embed,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ RB: %v", err)
		return
	}

	colors := []string{"üî¥", "‚ö´"}
	for i := 0; i < 5; i++ {
		color := colors[i%2]
		embed.Description = fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –ö—Ä—É—Ç–∏–º-–∫—Ä—É—Ç–∏–º... %s –ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–º–æ—Ç—Ä–∏—Ç! üëë", m.Author.ID, amount, choice, color)
		_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
			Channel: m.ChannelID,
			ID:      game.MenuMessageID,
			Embed:   embed,
		})
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é RB: %v", err)
		}
		time.Sleep(500 * time.Millisecond)
	}

	result := "red"
	if rand.Intn(2) == 1 {
		result = "black"
	}
	colorEmoji := "üî¥"
	if result == "black" {
		colorEmoji = "‚ö´"
	}

	embed.Description = fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: %s", m.Author.ID, amount, choice, colorEmoji)
	won := result == choice
	if won {
		winnings := amount * 2
		r.UpdateRating(m.Author.ID, winnings)
		embed.Description += fmt.Sprintf("\n\n‚úÖ –ü–æ–±–µ–¥–∞! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–≤–æ–ª–µ–Ω! –¢—ã –±–µ—Ä–∏ %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Ö–≤–∞–ª–∏—Ç —Ç–µ–±—è! üèÜ"}
	} else {
		embed.Description += fmt.Sprintf("\n\n‚ùå –ü—Ä–æ–∏–≥—Ä–∞–ª! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! –ü–æ—Ç–µ—Ä—è–ª: %d –∫—Ä–µ–¥–∏—Ç–æ–≤. üò¢", amount)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°"}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RedBlack
	r.UpdateRBStats(m.Author.ID, won)

	customID := fmt.Sprintf("rb_replay_%s_%d", game.PlayerID, time.Now().UnixNano())
	log.Printf("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CustomID –∫–Ω–æ–ø–∫–∏: %s", customID)
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ –¥–ª—è –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞! üéÆ",
					Style:    discordgo.PrimaryButton,
					CustomID: customID,
				},
			},
		},
	}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    m.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ RB —Å –∫–Ω–æ–ø–∫–æ–π: %v", err)
		return
	}

	r.mu.Lock()
	game.Active = false
	delete(r.redBlackGames, game.GameID)
	r.mu.Unlock()

	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		var activeGame *RedBlackGame
		for _, g := range r.redBlackGames {
			if g.MenuMessageID == messageID && g.Active {
				activeGame = g
				break
			}
		}
		if activeGame == nil {
			emptyComponents := []discordgo.MessageComponent{}
			_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
				Channel:    channelID,
				ID:         messageID,
				Embed:      embed,
				Components: &emptyComponents,
			})
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É RB: %v", err)
			}
			log.Printf("–ö–Ω–æ–ø–∫–∞ RB –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %s", messageID)
		}
		r.mu.Unlock()
	}(game.MenuMessageID, m.ChannelID)
}

// HandleRBReplay –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É RedBlack.
func (r *Ranking) HandleRBReplay(s *discordgo.Session, i *discordgo.InteractionCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ HandleRBReplay, CustomID: %s", i.MessageComponentData().CustomID)

	err := s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseDeferredMessageUpdate,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: %v", err)
		return
	}
	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s", i.Member.User.ID)

	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) != 4 {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomID: %s, –æ–∂–∏–¥–∞–ª–æ—Å—å 4 —á–∞—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–æ %d", i.MessageComponentData().CustomID, len(parts))
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ —Å–ª–æ–º–∞–Ω–∞! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! üò°",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
		return
	}
	playerID := parts[2]
	log.Printf("–†–∞–∑–æ–±—Ä–∞–Ω playerID: %s", playerID)

	if playerID != i.Member.User.ID {
		log.Printf("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ playerID: –æ–∂–∏–¥–∞–ª–æ—Å—å %s, –ø–æ–ª—É—á–µ–Ω–æ %s", playerID, i.Member.User.ID)
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ —Ç–≤–æ—è! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç! üëë",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
		return
	}

	newGameID := generateGameID(playerID)
	newColor := randomColor()
	game := &RedBlackGame{
		GameID:   newGameID,
		PlayerID: playerID,
		Active:   true,
		Color:    newColor,
	}
	r.mu.Lock()
	r.redBlackGames[newGameID] = game
	r.mu.Unlock()
	log.Printf("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ RB —Å ID %s –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s", newGameID, playerID)

	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("–í–µ–ª–∫–æ–º —Å–Ω–æ–≤–∞, <@%s>! ü•≥\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –¥–∞—ë—Ç —à–∞–Ω—Å: –≤—ã–±–∏—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π!\n\n**üí∞ –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ü–∏—à–∏ –≤–æ—Ç: `/rb <red/black> <—Å—É–º–º–∞>`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/rb red 50`\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π! üëë", playerID, r.GetRating(playerID)),
		Color:       newColor,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	log.Printf("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ embed RB –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s, ID —Å–æ–æ–±—â–µ–Ω–∏—è: %s", playerID, i.Message.ID)

	emptyComponents := []discordgo.MessageComponent{}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         i.Message.ID,
		Embed:      embed,
		Components: &emptyComponents,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é RB: %v", err)
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –û—à–∏–±–∫–∞! –ò–≥—Ä—É –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞! üò°",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
		return
	}
	log.Printf("Embed RB —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s, ID —Å–æ–æ–±—â–µ–Ω–∏—è: %s", playerID, i.Message.ID)

	r.mu.Lock()
	game.MenuMessageID = i.Message.ID
	r.mu.Unlock()

	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		if g, exists := r.redBlackGames[newGameID]; exists && g.Active {
			g.Active = false
			delete(r.redBlackGames, newGameID)
			timeoutEmbed := &discordgo.MessageEmbed{
				Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
				Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏, <@%s>! –í—Ä–µ–º—è –Ω–µ—Ç—É. ‚è∞\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°", playerID),
				Color:       newColor,
				Footer: &discordgo.MessageEmbedFooter{
					Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! ‚è∞",
				},
			}
			_, err := s.ChannelMessageEditEmbed(channelID, messageID, timeoutEmbed)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ RB –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: %v", err)
			}
		}
		r.mu.Unlock()
	}(i.Message.ID, i.ChannelID)
}

package ranking

import (
	"encoding/json"
	"fmt"
	"log"
	"sort"
	"strconv"
	"strings"

	"github.com/bwmarrin/discordgo"
	"github.com/go-redis/redis/v8"
)

// CinemaOption –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ.
type CinemaOption struct {
	Name  string         `json:"name"`
	Total int            `json:"total"`
	Bets  map[string]int `json:"bets"` // userID: amount
}

// PendingCinemaBid –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç pending —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
type PendingCinemaBid struct {
	UserID string
	IsNew  bool
	Name   string // –¥–ª—è –Ω–æ–≤—ã—Ö
	Index  int    // –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (0-based)
	Amount int
}

// LoadCinemaOptions –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ –∏–∑ Redis.
func (r *Ranking) LoadCinemaOptions() {
	data, err := r.redis.Get(r.ctx, "cinema:options").Result()
	if err == redis.Nil {
		r.cinemaOptions = []CinemaOption{}
		return
	} else if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cinema options –∏–∑ Redis: %v", err)
		r.cinemaOptions = []CinemaOption{}
		return
	}
	if err := json.Unmarshal([]byte(data), &r.cinemaOptions); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å cinema options: %v", err)
		r.cinemaOptions = []CinemaOption{}
	}
}

// SaveCinemaOptions —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ Redis.
func (r *Ranking) SaveCinemaOptions() {
	dataBytes, err := json.Marshal(r.cinemaOptions)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å cinema options: %v", err)
		return
	}
	if err := r.redis.Set(r.ctx, "cinema:options", dataBytes, 0).Err(); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cinema options –≤ Redis: %v", err)
	}
}

// HandleMessageReactionAdd –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫.
func (r *Ranking) HandleMessageReactionAdd(s *discordgo.Session, rea *discordgo.MessageReactionAdd) {
	if rea.UserID == s.State.User.ID {
		return
	}
	if rea.Emoji.Name != "‚úÖ" && rea.Emoji.Name != "‚ùå" {
		return
	}

	r.mu.Lock()
	bid, ok := r.pendingCinemaBids[rea.MessageID]
	r.mu.Unlock()
	if !ok {
		return
	}
	if rea.UserID != bid.UserID {
		return
	}

	if rea.Emoji.Name == "‚ùå" {
		r.mu.Lock()
		delete(r.pendingCinemaBids, rea.MessageID)
		r.mu.Unlock()
		s.ChannelMessageEdit(rea.ChannelID, rea.MessageID, "–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚úÖ
	currentRating := r.GetRating(bid.UserID)
	if currentRating < bid.Amount {
		s.ChannelMessageEdit(rea.ChannelID, rea.MessageID, "–¢–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
		r.mu.Lock()
		delete(r.pendingCinemaBids, rea.MessageID)
		r.mu.Unlock()
		return
	}

	r.UpdateRating(bid.UserID, -bid.Amount)

	r.mu.Lock()
	var msg string
	if bid.IsNew {
		option := CinemaOption{
			Name:  bid.Name,
			Total: bid.Amount,
			Bets:  map[string]int{bid.UserID: bid.Amount},
		}
		r.cinemaOptions = append(r.cinemaOptions, option)
		msg = fmt.Sprintf("<@%s> —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω \"%s\" %d", bid.UserID, bid.Name, bid.Amount)
	} else {
		if bid.Index < 0 || bid.Index >= len(r.cinemaOptions) {
			r.mu.Unlock()
			s.ChannelMessageEdit(rea.ChannelID, rea.MessageID, "–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			return
		}
		option := &r.cinemaOptions[bid.Index]
		option.Bets[bid.UserID] = option.Bets[bid.UserID] + bid.Amount
		option.Total += bid.Amount
		msg = fmt.Sprintf("<@%s> –¥–æ–±–∞–≤–∏–ª —Å—Ç–∞–≤–∫—É %d –Ω–∞ \"%s\" (total %d)", bid.UserID, bid.Amount, option.Name, option.Total)
	}
	r.SaveCinemaOptions()
	delete(r.pendingCinemaBids, rea.MessageID)
	r.mu.Unlock()

	_, err := s.ChannelMessageSend(r.cinemaChannelID, msg)
	if err != nil {
		log.Printf("Failed to send to cinema channel: %v", err)
	}
	s.ChannelMessageEdit(rea.ChannelID, rea.MessageID, "–°—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
}

// HandleCinemaCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !cinema <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞>.
func (r *Ranking) HandleCinemaCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !cinema: %s –æ—Ç %s", command, m.Author.ID)
	parts := strings.Fields(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑—É–π: !cinema <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞>")
		return
	}
	amountStr := parts[len(parts)-1]
	amount, err := strconv.Atoi(amountStr)
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}
	name := strings.Join(parts[1:len(parts)-1], " ")
	if len(name) > 255 {
		s.ChannelMessageSend(m.ChannelID, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (max 255 —Å–∏–º–≤–æ–ª–æ–≤)!")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	confirmText := fmt.Sprintf("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É –Ω–∞ –∫–∏–Ω–æ–∞—É–∫ –≤–∞—Ä–∏–∞–Ω—Ç \"%s\" —Å–æ —Å—Ç–∞–≤–∫–æ–π %d?", name, amount)
	confirmMsg, err := s.ChannelMessageSend(m.ChannelID, confirmText)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: %v", err)
		return
	}

	err = s.MessageReactionAdd(confirmMsg.ChannelID, confirmMsg.ID, "‚úÖ")
	if err != nil {
		log.Printf("Failed to add ‚úÖ: %v", err)
	}
	err = s.MessageReactionAdd(confirmMsg.ChannelID, confirmMsg.ID, "‚ùå")
	if err != nil {
		log.Printf("Failed to add ‚ùå: %v", err)
	}

	r.mu.Lock()
	r.pendingCinemaBids[confirmMsg.ID] = PendingCinemaBid{
		UserID: m.Author.ID,
		IsNew:  true,
		Name:   name,
		Amount: amount,
	}
	r.mu.Unlock()
}

// HandleBetCinemaCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !betcinema <–Ω–æ–º–µ—Ä> <—Å—É–º–º–∞>.
func (r *Ranking) HandleBetCinemaCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !betcinema: %s –æ—Ç %s", command, m.Author.ID)
	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑—É–π: !betcinema <–Ω–æ–º–µ—Ä> <—Å—É–º–º–∞>")
		return
	}
	indexStr := parts[1]
	amountStr := parts[2]
	index, err := strconv.Atoi(indexStr)
	if err != nil || index <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
		return
	}
	index-- // 0-based
	amount, err := strconv.Atoi(amountStr)
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	r.mu.Lock()
	if index >= len(r.cinemaOptions) {
		r.mu.Unlock()
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
		return
	}
	name := r.cinemaOptions[index].Name
	r.mu.Unlock()

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	confirmText := fmt.Sprintf("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É %d –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç \"%s\"?", amount, name)
	confirmMsg, err := s.ChannelMessageSend(m.ChannelID, confirmText)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: %v", err)
		return
	}

	err = s.MessageReactionAdd(confirmMsg.ChannelID, confirmMsg.ID, "‚úÖ")
	if err != nil {
		log.Printf("Failed to add ‚úÖ: %v", err)
	}
	err = s.MessageReactionAdd(confirmMsg.ChannelID, confirmMsg.ID, "‚ùå")
	if err != nil {
		log.Printf("Failed to add ‚ùå: %v", err)
	}

	r.mu.Lock()
	r.pendingCinemaBids[confirmMsg.ID] = PendingCinemaBid{
		UserID: m.Author.ID,
		IsNew:  false,
		Index:  index,
		Amount: amount,
	}
	r.mu.Unlock()
}

// HandleCinemaListCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !cinemalist (–¥–ª—è –≤—Å–µ—Ö).
func (r *Ranking) HandleCinemaListCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !cinemalist –æ—Ç %s", m.Author.ID)
	r.mu.Lock()
	defer r.mu.Unlock()
	if len(r.cinemaOptions) == 0 {
		s.ChannelMessageSend(m.ChannelID, "–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ! üò¢")
		return
	}
	response := "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∏–Ω–æ–∞—É–∫—Ü–∏–æ–Ω–∞:\n"
	for i, opt := range r.cinemaOptions {
		response += fmt.Sprintf("%d. %s ‚Äî %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", i+1, opt.Name, opt.Total)
	}
	s.ChannelMessageSend(m.ChannelID, response)
}

// HandleAdminCinemaListCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !admincinemalist (–¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
func (r *Ranking) HandleAdminCinemaListCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !admincinemalist –æ—Ç %s", m.Author.ID)
	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫! üîí")
		return
	}
	r.mu.Lock()
	defer r.mu.Unlock()
	if len(r.cinemaOptions) == 0 {
		s.ChannelMessageSend(m.ChannelID, "–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ! üò¢")
		return
	}
	response := "–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∏–Ω–æ–∞—É–∫—Ü–∏–æ–Ω–∞:\n"
	for i, opt := range r.cinemaOptions {
		response += fmt.Sprintf("%d. %s ‚Äî %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", i+1, opt.Name, opt.Total)
		for userID, amt := range opt.Bets {
			response += fmt.Sprintf("  - <@%s>: %d\n", userID, amt)
		}
	}
	s.ChannelMessageSend(m.ChannelID, response)
}

// HandleRemoveLowestCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !removelowest <—á–∏—Å–ª–æ>.
func (r *Ranking) HandleRemoveLowestCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !removelowest: %s –æ—Ç %s", command, m.Author.ID)
	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã! üîí")
		return
	}
	parts := strings.Fields(command)
	if len(parts) != 2 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑—É–π: !removelowest <—á–∏—Å–ª–æ>")
		return
	}
	num, err := strconv.Atoi(parts[1])
	if err != nil || num <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
		return
	}

	r.mu.Lock()
	if num >= len(r.cinemaOptions) {
		r.mu.Unlock()
		s.ChannelMessageSend(m.ChannelID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ!")
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ total ascending
	sort.Slice(r.cinemaOptions, func(i, j int) bool {
		return r.cinemaOptions[i].Total < r.cinemaOptions[j].Total
	})

	removed := r.cinemaOptions[:num]
	r.cinemaOptions = r.cinemaOptions[num:]

	// –†–µ—Ñ–∞–Ω–¥ —Å—Ç–∞–≤–æ–∫
	for _, opt := range removed {
		for userID, amt := range opt.Bets {
			r.UpdateRating(userID, amt)
			_, err := s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–í–æ–∑–≤—Ä–∞—Ç %d –∫—Ä–µ–¥–∏—Ç–æ–≤ <@%s> –∑–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç \"%s\"", amt, userID, opt.Name))
			if err != nil {
				log.Printf("Failed to notify refund: %v", err)
			}
		}
	}
	r.SaveCinemaOptions()
	r.mu.Unlock()

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ –£–¥–∞–ª–µ–Ω–æ %d —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", num))
}

// HandleAdjustCinemaCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !adjustcinema <–Ω–æ–º–µ—Ä> <+/-—Å—É–º–º–∞>.
func (r *Ranking) HandleAdjustCinemaCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !adjustcinema: %s –æ—Ç %s", command, m.Author.ID)
	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏! üîí")
		return
	}
	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑—É–π: !adjustcinema <–Ω–æ–º–µ—Ä> <+/-—Å—É–º–º–∞>")
		return
	}
	indexStr := parts[1]
	adjustStr := parts[2]
	index, err := strconv.Atoi(indexStr)
	if err != nil || index <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
		return
	}
	index--
	adjust, err := strconv.Atoi(adjustStr)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (—Å + –∏–ª–∏ -)!")
		return
	}

	r.mu.Lock()
	if index >= len(r.cinemaOptions) {
		r.mu.Unlock()
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
		return
	}
	opt := &r.cinemaOptions[index]
	opt.Total += adjust
	if opt.Total < 0 {
		opt.Total = 0
	}
	r.SaveCinemaOptions()
	r.mu.Unlock()

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω total –¥–ª—è \"%s\": %d", opt.Name, opt.Total))
}

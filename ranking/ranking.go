package ranking

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/go-redis/redis/v8"
)

type User struct {
	ID     string `json:"id"`
	Rating int    `json:"rating"`
}

type Poll struct {
	ID       string         // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π 5-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID –æ–ø—Ä–æ—Å–∞
	Question string         // –í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
	Options  []string       // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
	Bets     map[string]int // –°—Ç–∞–≤–∫–∏: userID -> —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
	Choices  map[string]int // –í—ã–±–æ—Ä: userID -> –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1, 2, ...)
	Active   bool           // –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
	Creator  string         // ID –∞–¥–º–∏–Ω–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –æ–ø—Ä–æ—Å
	Created  time.Time      // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
}

type RedBlackGame struct {
	GameID        string // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
	PlayerID      string
	Bet           int
	Choice        string
	Active        bool
	MenuMessageID string // ID –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	Color         int    // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è embed
}

type Card struct {
	Suit  string // –ú–∞—Å—Ç—å (‚ô†, ‚ô•, ‚ô¶, ‚ô£)
	Value string // –ó–Ω–∞—á–µ–Ω–∏–µ (2-10, J, Q, K, A)
}

type BlackjackGame struct {
	GameID        string // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
	PlayerID      string
	Bet           int
	PlayerCards   []Card
	DealerCards   []Card
	Active        bool
	LastActivity  time.Time
	MenuMessageID string // ID –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
	Color         int    // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è embed
	ChannelID     string // –ö–∞–Ω–∞–ª –∏–≥—Ä—ã
}

type Ranking struct {
	mu             sync.Mutex
	admins         map[string]bool
	polls          map[string]*Poll
	redis          *redis.Client
	ctx            context.Context
	voiceAct       map[string]int
	redBlackGames  map[string]*RedBlackGame
	blackjackGames map[string]*BlackjackGame
	floodChannelID string // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

func NewRanking(adminFilePath, redisAddr, floodChannelID string) (*Ranking, error) {
	r := &Ranking{
		admins:         make(map[string]bool),
		polls:          make(map[string]*Poll),
		voiceAct:       make(map[string]int),
		redBlackGames:  make(map[string]*RedBlackGame),
		blackjackGames: make(map[string]*BlackjackGame),
		ctx:            context.Background(),
		floodChannelID: floodChannelID,
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
	var err error
	for i := 0; i < 5; i++ {
		r.redis = redis.NewClient(&redis.Options{
			Addr: redisAddr,
		})
		_, err = r.redis.Ping(r.ctx).Result()
		if err == nil {
			break
		}
		log.Printf("Failed to connect to Redis (attempt %d/5): %v", i+1, err)
		time.Sleep(5 * time.Second)
	}
	if err != nil {
		return nil, fmt.Errorf("failed to connect to Redis after 5 attempts: %v", err)
	}

	file, err := os.Open(adminFilePath)
	if err != nil {
		return nil, fmt.Errorf("failed to open admin file: %v", err)
	}
	defer file.Close()

	var admins struct {
		IDs []string `json:"admin_ids"`
	}
	if err := json.NewDecoder(file).Decode(&admins); err != nil {
		return nil, fmt.Errorf("failed to parse admin file: %v", err)
	}
	for _, id := range admins.IDs {
		r.admins[id] = true
	}

	log.Printf("Initialized ranking with %d admins", len(r.admins))
	return r, nil
}

func (r *Ranking) GetRating(userID string) int {
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == redis.Nil {
			return 0
		}
		if err != nil {
			log.Printf("Failed to get rating for %s from Redis (attempt %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		var user User
		if err := json.Unmarshal([]byte(data), &user); err != nil {
			log.Printf("Failed to unmarshal user %s: %v", userID, err)
			return 0
		}
		return user.Rating
	}
	log.Printf("Failed to get rating for %s after 3 attempts", userID)
	return 0
}

func (r *Ranking) UpdateRating(userID string, points int) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
	user := User{ID: userID, Rating: 0}
	for i := 0; i < 3; i++ {
		data, err := r.redis.Get(r.ctx, "user:"+userID).Result()
		if err == nil {
			if err := json.Unmarshal([]byte(data), &user); err != nil {
				log.Printf("Failed to unmarshal user %s: %v", userID, err)
				return
			}
			break
		} else if err == redis.Nil {
			break
		} else {
			log.Printf("Failed to get user %s from Redis (attempt %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
		}
	}

	user.Rating += points
	if user.Rating < 0 {
		user.Rating = 0
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
	dataBytes, err := json.Marshal(user)
	if err != nil {
		log.Printf("Failed to marshal user %s: %v", userID, err)
		return
	}

	for i := 0; i < 3; i++ {
		if err := r.redis.Set(r.ctx, "user:"+userID, dataBytes, 0).Err(); err != nil {
			log.Printf("Failed to save user %s to Redis (attempt %d/3): %v", userID, i+1, err)
			time.Sleep(1 * time.Second)
			continue
		}
		log.Printf("Updated rating for %s: %d (change: %d)", userID, user.Rating, points)
		return
	}
	log.Printf("Failed to save user %s to Redis after 3 attempts", userID)
	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ floodChannelID
	if r.floodChannelID != "" {
		s, err := discordgo.New("Bot " + os.Getenv("DISCORD_TOKEN"))
		if err == nil {
			s.ChannelMessageSend(r.floodChannelID, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ Redis –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Redis-—Å–µ—Ä–≤–µ—Ä.")
		}
	}
}

func (r *Ranking) GetTop5() []User {
	keys, err := r.redis.Keys(r.ctx, "user:*").Result()
	if err != nil {
		log.Printf("Failed to get user keys from Redis: %v", err)
		return nil
	}

	users := make([]User, 0)
	for _, key := range keys {
		data, err := r.redis.Get(r.ctx, key).Result()
		if err != nil {
			log.Printf("Failed to load user %s from Redis: %v", key, err)
			continue
		}
		var user User
		if err := json.Unmarshal([]byte(data), &user); err != nil {
			log.Printf("Failed to unmarshal user %s: %v", key, err)
			continue
		}
		if user.Rating > 0 {
			users = append(users, user)
		}
	}

	sort.Slice(users, func(i, j int) bool {
		return users[i].Rating > users[j].Rating
	})

	if len(users) > 5 {
		return users[:5]
	}
	log.Printf("Top 5 users: %v", users)
	return users
}

func (r *Ranking) IsAdmin(userID string) bool {
	r.mu.Lock()
	defer r.mu.Unlock()
	isAdmin := r.admins[userID]
	log.Printf("Checking if %s is admin: %v", userID, isAdmin)
	return isAdmin
}

func generateGameID(playerID string) string {
	rand.Seed(time.Now().UnixNano())
	return fmt.Sprintf("%s_%d_%d", playerID, time.Now().UnixNano(), rand.Intn(10000))
}

func randomColor() int {
	// –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGB (0xRRGGBB)
	return rand.Intn(0xFFFFFF)
}

func generatePollID() string {
	const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	rand.Seed(time.Now().UnixNano())
	id := make([]byte, 5)
	for i := range id {
		id[i] = letters[rand.Intn(len(letters))]
	}
	return string(id)
}

// GetCoefficients –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø—Ä–æ—Å–∞
func (p *Poll) GetCoefficients() []float64 {
	totalBet := 0
	optionBets := make([]int, len(p.Options))

	// –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	for _, bet := range p.Bets {
		totalBet += bet
	}
	for userID, choice := range p.Choices {
		optionBets[choice-1] += p.Bets[userID]
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
	coefficients := make([]float64, len(p.Options))
	for i := range p.Options {
		if optionBets[i] == 0 {
			coefficients[i] = 0
		} else {
			coefficients[i] = float64(totalBet) / float64(optionBets[i])
		}
	}
	return coefficients
}

func (r *Ranking) HandlePollCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !cpoll: %s from %s", command, m.Author.ID)

	parts := splitCommand(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!cpoll –í–æ–ø—Ä–æ—Å [–í–∞—Ä–∏–∞–Ω—Ç1] [–í–∞—Ä–∏–∞–Ω—Ç2] ...`")
		return
	}

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∏—â–∏-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã! üîí")
		return
	}

	var questionParts []string
	var options []string
	for _, part := range parts[1:] {
		if strings.HasPrefix(part, "[") && strings.HasSuffix(part, "]") {
			trimmed := strings.Trim(part, "[]")
			if trimmed != "" {
				options = append(options, trimmed)
			}
		} else {
			questionParts = append(questionParts, part)
		}
	}
	question := strings.Join(questionParts, " ")
	if question == "" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üìù")
		return
	}

	if len(options) < 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞! üìä")
		return
	}

	pollID := generatePollID()
	r.mu.Lock()
	r.polls[pollID] = &Poll{
		ID:       pollID,
		Question: question,
		Options:  options,
		Bets:     make(map[string]int),
		Choices:  make(map[string]int),
		Active:   true,
		Creator:  m.Author.ID,
		Created:  time.Now(),
	}
	r.mu.Unlock()

	response := fmt.Sprintf("üéâ **–û–ø—Ä–æ—Å %s –∑–∞–ø—É—â–µ–Ω!**\n<@%s> —Å–æ–∑–¥–∞–ª –æ–ø—Ä–æ—Å: **%s**\n\nüìã **–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n", pollID, m.Author.ID, question)
	for i, opt := range options {
		response += fmt.Sprintf("%d. [%s]\n", i+1, opt)
	}
	response += fmt.Sprintf("\nüí∏ –°—Ç–∞–≤—å—Ç–µ: `!dep %s <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>`\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ: `!closedep %s <–Ω–æ–º–µ—Ä>`", pollID, pollID)
	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("Poll %s created by %s: %s with options %v", pollID, m.Author.ID, question, options)
}

func (r *Ranking) HandleDepCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !dep: %s from %s", command, m.Author.ID)

	parts := splitCommand(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!dep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>`")
		return
	}

	pollID := parts[1]
	option, err := strconv.Atoi(parts[2])
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! üî¢")
		return
	}

	amount, err := strconv.Atoi(parts[3])
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	r.mu.Lock()
	poll, exists := r.polls[pollID]
	if !exists || !poll.Active {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç! üîí")
		r.mu.Unlock()
		return
	}

	if option < 1 || option > len(poll.Options) {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ %d! üìä", len(poll.Options)))
		r.mu.Unlock()
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d üí∞", userRating))
		r.mu.Unlock()
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É (—Å—É–º–º–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
	r.UpdateRating(m.Author.ID, -amount)
	if _, exists := poll.Bets[m.Author.ID]; exists {
		poll.Bets[m.Author.ID] += amount // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É
	} else {
		poll.Bets[m.Author.ID] = amount
	}
	poll.Choices[m.Author.ID] = option
	r.mu.Unlock()

	// –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
	coefficients := poll.GetCoefficients()
	coefficient := coefficients[option-1]

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üé≤ <@%s> –ø–æ—Å—Ç–∞–≤–∏–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ [%s] –≤ –æ–ø—Ä–æ—Å–µ **%s** üìä\n**üìà –¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** %.2f", m.Author.ID, amount, poll.Options[option-1], poll.Question, coefficient))
	log.Printf("User %s bet %d on option %d in poll %s, coefficient: %.2f", m.Author.ID, amount, option, pollID, coefficient)
}

func (r *Ranking) HandleCloseDepCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !closedep: %s from %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!closedep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ_–≤–∞—Ä–∏–∞–Ω—Ç–∞>`")
		return
	}

	pollID := parts[1]
	winningOptionStr := strings.Trim(parts[2], "<>[]")
	winningOption, err := strconv.Atoi(winningOptionStr)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! üî¢")
		return
	}

	r.mu.Lock()
	poll, exists := r.polls[pollID]
	if !exists {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω! üìä")
		r.mu.Unlock()
		return
	}
	if !poll.Active {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç! üîí")
		r.mu.Unlock()
		return
	}

	if m.Author.ID != poll.Creator {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –æ–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å! üîê")
		r.mu.Unlock()
		return
	}

	if winningOption < 1 || winningOption > len(poll.Options) {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ %d! üìä", len(poll.Options)))
		r.mu.Unlock()
		return
	}

	totalBet := 0
	winnersBet := 0
	for _, bet := range poll.Bets {
		totalBet += bet
	}
	for userID, choice := range poll.Choices {
		if choice == winningOption {
			winnersBet += poll.Bets[userID]
		}
	}

	var coefficient float64
	if winnersBet == 0 {
		coefficient = 0
	} else {
		coefficient = float64(totalBet) / float64(winnersBet)
	}

	response := fmt.Sprintf("‚úÖ **–û–ø—Ä–æ—Å %s –∑–∞–≤–µ—Ä—à—ë–Ω!** üèÜ\n–ü–æ–±–µ–¥–∏–ª: **%s** (‚Ññ%d)\nüìà **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** %.2f\n\nüéâ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n", pollID, poll.Options[winningOption-1], winningOption, coefficient)
	for userID, choice := range poll.Choices {
		if choice == winningOption {
			winnings := int(float64(poll.Bets[userID]) * coefficient)
			r.UpdateRating(userID, winnings+poll.Bets[userID])
			response += fmt.Sprintf("<@%s>: %d –∫—Ä–µ–¥–∏—Ç–æ–≤ (—Å—Ç–∞–≤–∫–∞: %d) üí∞\n", userID, winnings+poll.Bets[userID], poll.Bets[userID])
		}
	}
	if winnersBet == 0 {
		response += "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª! üò¢"
	}

	poll.Active = false
	r.mu.Unlock()

	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("Poll %s closed by %s, winner: %s, coefficient: %.2f", pollID, m.Author.ID, poll.Options[winningOption-1], coefficient)
}

// !polls
func (r *Ranking) HandlePollsCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("Processing !polls: %s from %s", m.Content, m.Author.ID)

	r.mu.Lock()
	defer r.mu.Unlock()

	if len(r.polls) == 0 {
		s.ChannelMessageSend(m.ChannelID, "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤! –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é `!cpoll`! üéâ")
		return
	}

	response := "üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:**\n"
	for pollID, poll := range r.polls {
		if !poll.Active {
			continue
		}
		response += fmt.Sprintf("\n**–û–ø—Ä–æ—Å %s: %s** üéâ\n", pollID, poll.Question)
		coefficients := poll.GetCoefficients()
		for i, option := range poll.Options {
			response += fmt.Sprintf("üìã –í–∞—Ä–∏–∞–Ω—Ç %d. [%s] (üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: %.2f)\n", i+1, option, coefficients[i])
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
			for userID, choice := range poll.Choices {
				if choice == i+1 {
					bet := poll.Bets[userID]
					potentialWin := int(float64(bet) * coefficients[i])
					response += fmt.Sprintf("  - <@%s>: %d –∫—Ä–µ–¥–∏—Ç–æ–≤ (üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: %d)\n", userID, bet, potentialWin+bet)
				}
			}
		}
	}

	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("Polls list sent to %s", m.Author.ID)
}

// !rb
// !rb
func (r *Ranking) StartRBGame(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("StartRBGame called for user %s", m.Author.ID)

	r.mu.Lock()
	gameID := generateGameID(m.Author.ID)
	color := randomColor()
	game := &RedBlackGame{
		GameID:   gameID,
		PlayerID: m.Author.ID,
		Active:   true,
		Color:    color,
	}
	r.redBlackGames[gameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("–í–µ–ª–∫–æ–º, <@%s>! ü•≥\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≤–µ–ª–∏—Ç: –≤—ã–±–∏—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π!\n\n**üí∞ –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ü–∏—à–∏ –≤–æ—Ç: `!rb <red/black> <—Å—É–º–º–∞>`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `!rb red 50`\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π! üëë", m.Author.ID, r.GetRating(m.Author.ID)),
		Color:       color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	msg, err := s.ChannelMessageSendEmbed(m.ChannelID, embed)
	if err != nil {
		log.Printf("Failed to send RB menu: %v", err)
		return
	}

	r.mu.Lock()
	game.MenuMessageID = msg.ID
	r.mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		if g, exists := r.redBlackGames[gameID]; exists && g.Active {
			g.Active = false
			delete(r.redBlackGames, gameID)
			embed := &discordgo.MessageEmbed{
				Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
				Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏, <@%s>! –í—Ä–µ–º—è –Ω–µ—Ç—É. ‚è∞\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°", m.Author.ID),
				Color:       color,
				Footer: &discordgo.MessageEmbedFooter{
					Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! ‚è∞",
				},
			}
			_, err := s.ChannelMessageEditEmbed(channelID, messageID, embed)
			if err != nil {
				log.Printf("Failed to update RB message on timeout: %v", err)
			}
		}
		r.mu.Unlock()
	}(msg.ID, m.ChannelID)
}

// !rb <red/black> <amount>
func (r *Ranking) HandleRBCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) < 3 {
		r.sendTemporaryReply(s, m, "‚ùå –ü–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: `!rb <red/black> <—Å—É–º–º–∞>`")
		return
	}

	choice := strings.ToLower(parts[1])
	if choice != "red" && choice != "black" {
		r.sendTemporaryReply(s, m, "‚ùå –í—ã–±–∏—Ä–∞—Ç—å –Ω–∞–¥–æ `red` –∏–ª–∏ `black`! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∂–¥—ë—Ç! üëë")
		return
	}

	amount, err := strconv.Atoi(parts[2])
	if err != nil || amount <= 0 {
		r.sendTemporaryReply(s, m, "‚ùå –°—É–º–º–∞ –Ω–∞–¥–æ —á–∏—Å–ª–æ —Ö–æ—Ä–æ—à–µ–µ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ª—é–±–∏—Ç —à—É—Ç–∫–∏! üò°")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		r.sendTemporaryReply(s, m, fmt.Sprintf("‚ùå –ö—Ä–µ–¥–∏—Ç–æ–≤ –º–∞–ª–æ! –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è: %d üò¢ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–∞—Å—Ç –≤–∑–∞–π–º—ã!", userRating))
		return
	}

	r.mu.Lock()
	var game *RedBlackGame
	for _, g := range r.redBlackGames {
		if g.PlayerID == m.Author.ID && g.Active && g.Bet == 0 {
			game = g
			break
		}
	}
	if game == nil {
		r.sendTemporaryReply(s, m, "‚ùå –ò–≥—Ä—É –Ω–∞—á–∏–Ω–∞–π —Å `!rb`! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∂–¥—ë—Ç —Ç–µ–±—è! üëë")
		r.mu.Unlock()
		return
	}

	game.Bet = amount
	game.Choice = choice
	r.mu.Unlock()

	r.UpdateRating(m.Author.ID, -amount)

	// –û–±–Ω–æ–≤–ª—è–µ–º "–æ–∫–Ω–æ –∏–≥—Ä—ã" —Å –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –ö—Ä—É—Ç–∏–º-–∫—Ä—É—Ç–∏–º... –ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–º–æ—Ç—Ä–∏—Ç! üëë", m.Author.ID, amount, choice),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel: m.ChannelID,
		ID:      game.MenuMessageID,
		Embed:   embed,
	})
	if err != nil {
		log.Printf("Failed to update RB message: %v", err)
		return
	}

	// –ê–Ω–∏–º–∞—Ü–∏—è: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
	colors := []string{"üî¥", "‚ö´"}
	for i := 0; i < 5; i++ {
		color := colors[i%2]
		embed.Description = fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –ö—Ä—É—Ç–∏–º-–∫—Ä—É—Ç–∏–º... %s –ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–º–æ—Ç—Ä–∏—Ç! üëë", m.Author.ID, amount, choice, color)
		_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
			Channel: m.ChannelID,
			ID:      game.MenuMessageID,
			Embed:   embed,
		})
		if err != nil {
			log.Printf("Failed to update RB animation: %v", err)
		}
		time.Sleep(500 * time.Millisecond)
	}

	// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := "red"
	if rand.Intn(2) == 1 {
		result = "black"
	}
	colorEmoji := "üî¥"
	if result == "black" {
		colorEmoji = "‚ö´"
	}

	embed.Description = fmt.Sprintf("<@%s> —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ %s!\n\nüé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: %s", m.Author.ID, amount, choice, colorEmoji)
	if result == choice {
		winnings := amount * 2
		r.UpdateRating(m.Author.ID, winnings)
		embed.Description += fmt.Sprintf("\n\n‚úÖ –ü–æ–±–µ–¥–∞! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–≤–æ–ª–µ–Ω! –¢—ã –±–µ—Ä–∏ %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Ö–≤–∞–ª–∏—Ç —Ç–µ–±—è! üèÜ"}
	} else {
		embed.Description += fmt.Sprintf("\n\n‚ùå –ü—Ä–æ–∏–≥—Ä–∞–ª! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! –ü–æ—Ç–µ—Ä—è–ª: %d –∫—Ä–µ–¥–∏—Ç–æ–≤. üò¢", amount)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°"}
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
	customID := fmt.Sprintf("rb_replay_%s_%d", game.PlayerID, time.Now().UnixNano())
	log.Printf("Setting button CustomID: %s", customID)
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ –¥–ª—è –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞! üéÆ",
					Style:    discordgo.PrimaryButton,
					CustomID: customID,
				},
			},
		},
	}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    m.ChannelID,
		ID:         game.MenuMessageID, // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("Failed to edit RB message with button: %v", err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º MenuMessageID (—Ö–æ—Ç—è ID –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
	r.mu.Lock()
	game.Active = false
	delete(r.redBlackGames, game.GameID)
	r.mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		var activeGame *RedBlackGame
		for _, g := range r.redBlackGames {
			if g.MenuMessageID == messageID && g.Active {
				activeGame = g
				break
			}
		}
		if activeGame == nil {
			// –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
			emptyComponents := []discordgo.MessageComponent{}
			_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
				Channel:    channelID,
				ID:         messageID,
				Embed:      embed,
				Components: &emptyComponents,
			})
			if err != nil {
				log.Printf("Failed to disable RB button: %v", err)
			}
			log.Printf("Disabled RB button for message %s", messageID)
		}
		r.mu.Unlock()
	}(game.MenuMessageID, m.ChannelID)
}

// !blackjack
func (r *Ranking) StartBlackjackGame(s *discordgo.Session, m *discordgo.MessageCreate) {
	r.mu.Lock()
	gameID := generateGameID(m.Author.ID)
	color := randomColor()
	game := &BlackjackGame{
		GameID:       gameID,
		PlayerID:     m.Author.ID,
		Active:       true,
		LastActivity: time.Now(),
		Color:        color,
		ChannelID:    m.ChannelID,
	}
	r.blackjackGames[gameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ö–∞–∑–∏–Ω–æ: –ë–ª—ç–∫–¥–∂–µ–∫ üé∞",
		Description: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <@%s>! üéâ\n–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n**üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ù–∞–ø–∏—à–∏: `!blackjack <—Å—É–º–º–∞>`", m.Author.ID, r.GetRating(m.Author.ID)),
		Color:       color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ò–≥—Ä–∞–π —Å —É–º–æ–º! üçÄ",
		},
	}
	msg, err := s.ChannelMessageSendEmbed(m.ChannelID, embed)
	if err != nil {
		log.Printf("Failed to send Blackjack menu: %v", err)
		return
	}

	r.mu.Lock()
	game.MenuMessageID = msg.ID
	r.mu.Unlock()

	go r.blackjackTimeout(s, gameID)
}

func (r *Ranking) sendTemporaryReply(s *discordgo.Session, m *discordgo.MessageCreate, content string) {
	msg, err := s.ChannelMessageSendReply(m.ChannelID, content, m.Reference())
	if err != nil {
		log.Printf("Failed to send temporary reply: %v", err)
		return
	}
	time.Sleep(5 * time.Second)
	s.ChannelMessageDelete(m.ChannelID, msg.ID)
}

// !blackjack <amount>
func (r *Ranking) HandleBlackjackBet(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) != 2 {
		r.sendTemporaryReply(s, m, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!blackjack <—Å—É–º–º–∞>`\n–ü—Ä–∏–º–µ—Ä: `!blackjack 50`")
		return
	}

	amount, err := strconv.Atoi(parts[1])
	if err != nil || amount <= 0 {
		r.sendTemporaryReply(s, m, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		r.sendTemporaryReply(s, m, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	r.mu.Lock()
	var game *BlackjackGame
	for _, g := range r.blackjackGames {
		if g.PlayerID == m.Author.ID && g.Active && g.Bet == 0 { // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –±–µ–∑ —Å—Ç–∞–≤–∫–∏
			game = g
			break
		}
	}
	if game == nil {
		r.sendTemporaryReply(s, m, "‚ùå –ù–∞—á–Ω–∏ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é `!blackjack`!")
		r.mu.Unlock()
		return
	}

	game.Bet = amount
	game.LastActivity = time.Now() // –û–±–Ω–æ–≤–ª—è–µ–º LastActivity
	r.mu.Unlock()

	r.UpdateRating(m.Author.ID, -amount)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—É
	suits := []string{"‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"}
	values := []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}
	deck := make([]Card, 0, 52)
	for _, suit := range suits {
		for _, value := range values {
			deck = append(deck, Card{Suit: suit, Value: value})
		}
	}
	rand.Shuffle(len(deck), func(i, j int) { deck[i], deck[j] = deck[j], deck[i] })

	// –†–∞–∑–¥–∞—ë–º –∫–∞—Ä—Ç—ã
	playerCards := []Card{deck[0], deck[1]}
	dealerCards := []Card{deck[2], deck[3]}

	r.mu.Lock()
	game.PlayerCards = playerCards
	game.DealerCards = dealerCards
	game.LastActivity = time.Now() // –ï—â—ë —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏
	r.mu.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º "–æ–∫–Ω–æ –∏–≥—Ä—ã"
	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("<@%s> –Ω–∞—á–∞–ª –∏–≥—Ä—É —Å–æ —Å—Ç–∞–≤–∫–æ–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üí∏\n\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞]", m.Author.ID, amount, r.cardsToString(playerCards), r.calculateHand(playerCards), r.cardToString(dealerCards[0])),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–¥–µ–ª–∞–π —Ö–æ–¥! üçÄ",
		},
	}
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{Label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É üÉè", Style: discordgo.PrimaryButton, CustomID: fmt.Sprintf("blackjack_hit_%s", game.GameID)},
				discordgo.Button{Label: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚èπÔ∏è", Style: discordgo.SecondaryButton, CustomID: fmt.Sprintf("blackjack_stand_%s", game.GameID)},
			},
		},
	}

	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    m.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("Failed to update Blackjack game message: %v", err)
	}
}

func (r *Ranking) cardsToString(cards []Card) string {
	result := ""
	for _, card := range cards {
		result += fmt.Sprintf("%s%s ", card.Value, card.Suit)
	}
	return result
}

func (r *Ranking) cardToString(card Card) string {
	return fmt.Sprintf("%s%s", card.Value, card.Suit)
}

func (r *Ranking) calculateHand(cards []Card) int {
	sum := 0
	aces := 0
	for _, card := range cards {
		switch card.Value {
		case "A":
			aces++
			sum += 11
		case "J", "Q", "K":
			sum += 10
		default:
			val, _ := strconv.Atoi(card.Value)
			sum += val
		}
	}
	for sum > 21 && aces > 0 {
		sum -= 10
		aces--
	}
	return sum
}

func (r *Ranking) blackjackTimeout(s *discordgo.Session, gameID string) {
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		r.mu.Lock()
		game, exists := r.blackjackGames[gameID]
		if !exists || !game.Active {
			r.mu.Unlock()
			return
		}

		if time.Since(game.LastActivity) > 60*time.Second {
			game.Active = false
			embed := &discordgo.MessageEmbed{
				Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
				Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: <@%s> —É—à—ë–ª –∏–∑-–∑–∞ —Å—Ç–æ–ª–∞! üò¢", game.PlayerID),
				Color:       game.Color,
				Footer: &discordgo.MessageEmbedFooter{
					Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! ‚è∞",
				},
			}
			_, err := s.ChannelMessageEditEmbed(game.ChannelID, game.MenuMessageID, embed)
			if err != nil {
				log.Printf("Failed to edit message on timeout: %v", err)
			}
			// –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ blackjackGames
			delete(r.blackjackGames, gameID)
			r.mu.Unlock()
			s.ChannelMessageSendReply(r.floodChannelID, fmt.Sprintf("‚ô†Ô∏è <@%s> —É—à—ë–ª –∏ –ø–æ—Ç–µ—Ä—è–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üí∏", game.PlayerID, game.Bet), &discordgo.MessageReference{MessageID: game.MenuMessageID, ChannelID: r.floodChannelID})
			return
		}
		r.mu.Unlock()
	}
}

func (r *Ranking) HandleBlackjackHit(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) < 3 {
		log.Printf("Invalid CustomID format: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ "blackjack_hit_"
	gameID := strings.Join(parts[2:], "_")

	r.mu.Lock()
	game, exists := r.blackjackGames[gameID]
	if !exists {
		log.Printf("Game not found for GameID: %s", gameID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if !game.Active {
		log.Printf("Game is not active for GameID: %s, PlayerID: %s", gameID, game.PlayerID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	deck := r.generateDeck()
	newCard := deck[len(game.PlayerCards)+len(game.DealerCards)]
	game.PlayerCards = append(game.PlayerCards, newCard)
	game.LastActivity = time.Now() // –û–±–Ω–æ–≤–ª—è–µ–º LastActivity
	playerSum := r.calculateHand(game.PlayerCards)

	embed := &discordgo.MessageEmbed{
		Title: "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Color: game.Color,
	}
	var components []discordgo.MessageComponent
	if playerSum > 21 {
		game.Active = false
		embed.Description = fmt.Sprintf("–¢—ã –≤–∑—è–ª –∫–∞—Ä—Ç—É: %s\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è]\n\n‚ùå –ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! üí•", r.cardToString(newCard), r.cardsToString(game.PlayerCards), playerSum, r.cardToString(game.DealerCards[0]))
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–µ –ø–æ–≤–µ–∑–ª–æ! üò¢"}
		components = []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					discordgo.Button{
						Label:    "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üéÆ",
						Style:    discordgo.PrimaryButton,
						CustomID: fmt.Sprintf("blackjack_replay_%s_%s", game.PlayerID, game.MenuMessageID),
					},
				},
			},
		}
		// –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ blackjackGames
		delete(r.blackjackGames, gameID)
	} else {
		embed.Description = fmt.Sprintf("–¢—ã –≤–∑—è–ª –∫–∞—Ä—Ç—É: %s\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è]", r.cardToString(newCard), r.cardsToString(game.PlayerCards), playerSum, r.cardToString(game.DealerCards[0]))
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üçÄ"}
		components = []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					discordgo.Button{Label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É üÉè", Style: discordgo.PrimaryButton, CustomID: fmt.Sprintf("blackjack_hit_%s", game.GameID)},
					discordgo.Button{Label: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚èπÔ∏è", Style: discordgo.SecondaryButton, CustomID: fmt.Sprintf("blackjack_stand_%s", game.GameID)},
				},
			},
		}
	}
	r.mu.Unlock()

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("Failed to update Blackjack message: %v", err)
	}

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

func (r *Ranking) HandleBlackjackStand(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) < 3 {
		log.Printf("Invalid CustomID format: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ "blackjack_stand_"
	gameID := strings.Join(parts[2:], "_")

	r.mu.Lock()
	game, theGameExists := r.blackjackGames[gameID]
	if !theGameExists {
		log.Printf("Game not found for GameID: %s", gameID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if !game.Active {
		log.Printf("Game is not active for GameID: %s, PlayerID: %s", gameID, game.PlayerID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	game.LastActivity = time.Now() // –û–±–Ω–æ–≤–ª—è–µ–º LastActivity
	playerSum := r.calculateHand(game.PlayerCards)
	dealerSum := r.calculateHand(game.DealerCards)

	deck := r.generateDeck()
	cardIndex := len(game.PlayerCards) + len(game.DealerCards)
	for dealerSum < 17 && cardIndex < len(deck) {
		game.DealerCards = append(game.DealerCards, deck[cardIndex])
		dealerSum = r.calculateHand(game.DealerCards)
		cardIndex++
	}

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s (–°—É–º–º–∞: %d)", r.cardsToString(game.PlayerCards), playerSum, r.cardsToString(game.DealerCards), dealerSum),
		Color:       game.Color,
	}

	var result string
	if dealerSum > 21 {
		winnings := game.Bet * 2
		r.UpdateRating(game.PlayerID, winnings)
		result = fmt.Sprintf("‚úÖ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –¢—ã –≤—ã–∏–≥—Ä–∞–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü–æ–±–µ–¥–∞! üèÜ"}
	} else if playerSum > dealerSum {
		winnings := game.Bet * 2
		r.UpdateRating(game.PlayerID, winnings)
		result = fmt.Sprintf("‚úÖ –¢—ã –≤—ã–∏–≥—Ä–∞–ª! %d –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ç–≤–æ–∏! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü–æ–±–µ–¥–∞! üèÜ"}
	} else if playerSum == dealerSum {
		r.UpdateRating(game.PlayerID, game.Bet)
		result = "ü§ù –ù–∏—á—å—è! –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. üîÑ"
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–∏—á—å—è! ü§ù"}
	} else {
		result = "‚ùå –î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª! üí•"
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–µ –ø–æ–≤–µ–∑–ª–æ! üò¢"}
	}

	embed.Description += fmt.Sprintf("\n\n%s", result)

	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üéÆ",
					Style:    discordgo.PrimaryButton,
					CustomID: fmt.Sprintf("blackjack_replay_%s_%s", game.PlayerID, game.MenuMessageID),
				},
			},
		},
	}

	game.Active = false
	// –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ blackjackGames
	delete(r.blackjackGames, gameID)
	r.mu.Unlock()

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("Failed to update Blackjack message: %v", err)
	}

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

func (r *Ranking) HandleBlackjackReplay(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) != 4 {
		log.Printf("Invalid CustomID format: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	playerID := parts[2]
	menuMessageID := parts[3]

	newGameID := generateGameID(playerID)
	newColor := randomColor()
	game := &BlackjackGame{
		GameID:        newGameID,
		PlayerID:      playerID,
		Active:        true,
		LastActivity:  time.Now(),
		Color:         newColor,
		ChannelID:     i.ChannelID,
		MenuMessageID: menuMessageID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π MenuMessageID
	}

	r.mu.Lock()
	r.blackjackGames[newGameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ö–∞–∑–∏–Ω–æ: –ë–ª—ç–∫–¥–∂–µ–∫ üé∞",
		Description: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <@%s>! üéâ\n–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n**üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ù–∞–ø–∏—à–∏: `!blackjack <—Å—É–º–º–∞>`", playerID, r.GetRating(playerID)),
		Color:       newColor,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ò–≥—Ä–∞–π —Å —É–º–æ–º! üçÄ",
		},
	}

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         menuMessageID,
		Embed:      embed,
		Components: &[]discordgo.MessageComponent{}, // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
	})
	if err != nil {
		log.Printf("Failed to update Blackjack menu: %v", err)
	}

	go r.blackjackTimeout(s, newGameID)

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

func (r *Ranking) HandleRBReplay(s *discordgo.Session, i *discordgo.InteractionCreate) {
	log.Printf("HandleRBReplay called, CustomID: %s", i.MessageComponentData().CustomID)

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç–∞
	err := s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseDeferredMessageUpdate,
	})
	if err != nil {
		log.Printf("Failed to respond to interaction: %v", err)
		return
	}
	log.Printf("Interaction response sent for player %s", i.Member.User.ID)

	// –†–∞–∑–±–∏—Ä–∞–µ–º CustomID
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) != 4 { // –û–∂–∏–¥–∞–µ–º rb_replay_<playerID>_<timestamp>
		log.Printf("Invalid CustomID format: %s, expected 4 parts, got %d", i.MessageComponentData().CustomID, len(parts))
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ —Å–ª–æ–º–∞–Ω–∞! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! üò°",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("Failed to send followup message: %v", err)
		}
		return
	}
	playerID := parts[2]
	// timestamp := parts[3] // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
	log.Printf("Parsed playerID: %s", playerID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ playerID —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
	if playerID != i.Member.User.ID {
		log.Printf("PlayerID mismatch: expected %s, got %s", playerID, i.Member.User.ID)
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ —Ç–≤–æ—è! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç! üëë",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("Failed to send followup message: %v", err)
		}
		return
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏–≥—Ä—É
	newGameID := generateGameID(playerID)
	newColor := randomColor()
	game := &RedBlackGame{
		GameID:   newGameID,
		PlayerID: playerID,
		Active:   true,
		Color:    newColor,
	}
	r.mu.Lock()
	r.redBlackGames[newGameID] = game
	r.mu.Unlock()
	log.Printf("Created new RB game with ID %s for player %s", newGameID, playerID)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
	embed := &discordgo.MessageEmbed{
		Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
		Description: fmt.Sprintf("–í–µ–ª–∫–æ–º —Å–Ω–æ–≤–∞, <@%s>! ü•≥\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –¥–∞—ë—Ç —à–∞–Ω—Å: –≤—ã–±–∏—Ä–∞—Ç—å —Ü–≤–µ—Ç –∏ —Å—Ç–∞–≤–∫–∞ –¥–µ–ª–∞–π!\n\n**üí∞ –ë–∞–ª–∞–Ω—Å–∞ —Ç–≤–æ—è:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ü–∏—à–∏ –≤–æ—Ç: `!rb <red/black> <—Å—É–º–º–∞>`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `!rb red 50`\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π! üëë", playerID, r.GetRating(playerID)),
		Color:       newColor,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ–∑—ë—Ç —Ç–µ–±–µ! üçÄ",
		},
	}
	log.Printf("Editing existing RB embed for player %s, message ID: %s", playerID, i.Message.ID)

	// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –Ω–∞–∂–∞—Ç—å "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –≤–æ –≤—Ä–µ–º—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
	emptyComponents := []discordgo.MessageComponent{}
	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         i.Message.ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		Embed:      embed,
		Components: &emptyComponents, // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
	})
	if err != nil {
		log.Printf("Failed to edit RB menu: %v", err)
		_, err := s.FollowupMessageCreate(i.Interaction, true, &discordgo.WebhookParams{
			Content: "‚ùå –û—à–∏–±–∫–∞! –ò–≥—Ä—É –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞! üò°",
			Flags:   discordgo.MessageFlagsEphemeral,
		})
		if err != nil {
			log.Printf("Failed to send followup message: %v", err)
		}
		return
	}
	log.Printf("RB embed edited successfully for player %s, message ID: %s", playerID, i.Message.ID)

	// –û–±–Ω–æ–≤–ª—è–µ–º MenuMessageID
	r.mu.Lock()
	game.MenuMessageID = i.Message.ID // ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	r.mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
	go func(messageID string, channelID string) {
		time.Sleep(15 * time.Minute)
		r.mu.Lock()
		if g, exists := r.redBlackGames[newGameID]; exists && g.Active {
			g.Active = false
			delete(r.redBlackGames, newGameID)
			timeoutEmbed := &discordgo.MessageEmbed{
				Title:       "üé∞ –ò–≥—Ä–∞: –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π",
				Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏, <@%s>! –í—Ä–µ–º—è –Ω–µ—Ç—É. ‚è∞\n–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ–≤–æ–ª–µ–Ω! üò°", playerID),
				Color:       newColor,
				Footer: &discordgo.MessageEmbedFooter{
					Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –≥–Ω–µ–≤–µ–Ω! ‚è∞",
				},
			}
			_, err := s.ChannelMessageEditEmbed(channelID, messageID, timeoutEmbed)
			if err != nil {
				log.Printf("Failed to update RB message on timeout: %v", err)
			}
		}
		r.mu.Unlock()
	}(i.Message.ID, i.ChannelID)
}

func (r *Ranking) HandleEndBlackjackCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !endblackjack: %s from %s", command, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—ã! üîí")
		return
	}

	parts := strings.Fields(command)
	if len(parts) != 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!endblackjack @id`")
		return
	}

	targetID := strings.TrimPrefix(parts[1], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	r.mu.Lock()
	var game *BlackjackGame
	for _, g := range r.blackjackGames {
		if g.PlayerID == targetID && g.Active {
			game = g
			break
		}
	}
	if game == nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫! ‚ô†Ô∏è")
		r.mu.Unlock()
		return
	}

	game.Active = false
	// –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ blackjackGames
	delete(r.blackjackGames, game.GameID)
	// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
	emptyComponents := []discordgo.MessageComponent{}
	emptyComponentsPtr := &emptyComponents
	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    m.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      &discordgo.MessageEmbed{Title: "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤", Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º: <@%s>! üö´", targetID), Color: 0xFFD700, Footer: &discordgo.MessageEmbedFooter{Text: "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚èπÔ∏è"}},
		Components: emptyComponentsPtr,
	})
	if err != nil {
		log.Printf("Failed to remove buttons on admin end: %v", err)
	}
	r.mu.Unlock()

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ô†Ô∏è –ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫ –¥–ª—è <@%s> –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—Ç–∞–≤–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. üí∏", targetID))
	log.Printf("Blackjack game for %s ended by admin %s", targetID, m.Author.ID)
}

func (r *Ranking) generateDeck() []Card {
	suits := []string{"‚ô†", "‚ô•", "‚ô¶", "‚ô£"}
	values := []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}
	deck := make([]Card, 0, 52)
	for _, suit := range suits {
		for _, value := range values {
			deck = append(deck, Card{Suit: suit, Value: value})
		}
	}
	rand.Shuffle(len(deck), func(i, j int) { deck[i], deck[j] = deck[j], deck[i] })
	return deck
}

func (r *Ranking) HandleChinaGive(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !china give: %s from %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) < 4 || parts[1] != "give" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!china give @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]`")
		return
	}

	targetID := strings.TrimPrefix(parts[2], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	amount, err := strconv.Atoi(parts[3])
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	senderRating := r.GetRating(m.Author.ID)
	if senderRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d üí∞", senderRating))
		return
	}

	r.UpdateRating(m.Author.ID, -amount)
	r.UpdateRating(targetID, amount)

	reason := ""
	if len(parts) > 4 {
		reason = strings.Join(parts[4:], " ")
	}

	response := fmt.Sprintf("‚úÖ <@%s> –ø–µ—Ä–µ–¥–∞–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤ <@%s>! üí∏", m.Author.ID, amount, targetID)
	if reason != "" {
		response += fmt.Sprintf(" | üìú –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	}
	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("User %s gave %d credits to %s. Reason: %s", m.Author.ID, amount, targetID, reason)
}

func (r *Ranking) HandleChinaRating(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !china rating: %s from %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) < 3 || parts[1] != "rating" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!china rating @id`")
		return
	}

	targetID := strings.TrimPrefix(parts[2], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	rating := r.GetRating(targetID)
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üí∞ –†–µ–π—Ç–∏–Ω–≥ <@%s>: %d –∫—Ä–µ–¥–∏—Ç–æ–≤ üìà", targetID, rating))
	log.Printf("Rating for %s requested by %s: %d", targetID, m.Author.ID, rating)
}

// !china clear coins
func (r *Ranking) HandleClearCoinsCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("Processing !china clear coins: %s from %s", m.Content, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—á–∏—â–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã! üîí")
		return
	}

	// –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ Redis
	keys, err := r.redis.Keys(r.ctx, "user:*").Result()
	if err != nil {
		log.Printf("Failed to get user keys from Redis: %v", err)
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤! üö´")
		return
	}

	for _, key := range keys {
		r.redis.Del(r.ctx, key)
	}

	s.ChannelMessageSend(m.ChannelID, "‚úÖ –í—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –æ–±–Ω—É–ª–µ–Ω—ã! üßπ")
	log.Printf("All credits cleared by %s", m.Author.ID)
}

// !china gift all <amount>
func (r *Ranking) HandleGiftAllCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !china gift all: %s from %s", command, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã! üîí")
		return
	}

	parts := strings.Fields(command)
	if len(parts) != 4 || parts[1] != "gift" || parts[2] != "all" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!china gift all <—Å—É–º–º–∞>`")
		return
	}

	amount, err := strconv.Atoi(parts[3])
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis
	keys, err := r.redis.Keys(r.ctx, "user:*").Result()
	if err != nil {
		log.Printf("Failed to get user keys from Redis: %v", err)
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–æ–≤! üö´")
		return
	}

	for _, key := range keys {
		userID := strings.TrimPrefix(key, "user:")
		r.UpdateRating(userID, amount)
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üéÅ", amount))
	log.Printf("Admin %s gifted %d credits to all users", m.Author.ID, amount)
}

func (r *Ranking) HandleAdminGive(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("Processing !admin give: %s from %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) < 4 || parts[1] != "give" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!admin give @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]`")
		return
	}

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å! üîí")
		return
	}

	targetID := strings.TrimPrefix(parts[2], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	amount, err := strconv.Atoi(parts[3])
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	r.UpdateRating(targetID, amount)

	reason := ""
	if len(parts) > 4 {
		reason = strings.Join(parts[4:], " ")
	}

	verb := "–ø–æ–≤—ã—Å–∏–ª"
	if amount < 0 {
		verb = "–ø–æ–Ω–∏–∑–∏–ª"
		amount = -amount
	}
	response := fmt.Sprintf("‚úÖ –ê–¥–º–∏–Ω <@%s> %s —Ä–µ–π—Ç–∏–Ω–≥ <@%s> –Ω–∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤! ‚öôÔ∏è", m.Author.ID, verb, targetID, amount)
	if reason != "" {
		response += fmt.Sprintf(" | üìú –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	}
	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("Admin %s changed rating of %s by %d. Reason: %s", m.Author.ID, targetID, amount, reason)
}

func (r *Ranking) HandleHelpCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("Processing !chelp: %s from %s", m.Content, m.Author.ID)

	response := "üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n" +
		"üéâ **!cpoll –í–æ–ø—Ä–æ—Å [–í–∞—Ä–∏–∞–Ω—Ç1] [–í–∞—Ä–∏–∞–Ω—Ç2] ...** - (–ê–¥–º–∏–Ω) –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n" +
		"üí∏ **!dep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>** - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n" +
		"üîí **!closedep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä>** - (–ê–¥–º–∏–Ω) –ó–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å\n" +
		"üìä **!polls** - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ —Å—Ç–∞–≤–∫–∏\n" +
		"üé∞ **!rb** - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ö—Ä–∞—Å–Ω–æ–µ-–ß—ë—Ä–Ω–æ–µ\n" + // –ò–∑–º–µ–Ω–µ–Ω–æ —Å "!double" –Ω–∞ "!rb"
		"‚ô†Ô∏è **!blackjack** - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫\n" +
		"üö´ **!endblackjack @id** - (–ê–¥–º–∏–Ω) –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫\n" +
		"üí∞ **!china give @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]** - –ü–µ—Ä–µ–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n" +
		"üìà **!china rating @id** - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥\n" +
		"üßπ **!china clear coins** - (–ê–¥–º–∏–Ω) –û–±–Ω—É–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã —É –≤—Å–µ—Ö\n" +
		"üéÅ **!china gift all <—Å—É–º–º–∞>** - (–ê–¥–º–∏–Ω) –†–∞–∑–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –≤—Å–µ–º\n" +
		"‚öôÔ∏è **!admin give @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]** - (–ê–¥–º–∏–Ω) –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n" +
		"‚ùì **!chelp** - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n" +
		"üèÜ **!top5** - –¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"
	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("Help sent to %s", m.Author.ID)
}

func splitCommand(command string) []string {
	var parts []string
	var current string
	inQuotes := false
	inBrackets := false

	for _, char := range command {
		if char == '"' {
			inQuotes = !inQuotes
			current += string(char)
			continue
		}
		if char == '[' {
			inBrackets = true
			current += string(char)
			continue
		}
		if char == ']' {
			inBrackets = false
			current += string(char)
			continue
		}
		if char == ' ' && !inQuotes && !inBrackets {
			if current != "" {
				parts = append(parts, current)
				current = ""
			}
			continue
		}
		current += string(char)
	}
	if current != "" {
		parts = append(parts, current)
	}
	log.Printf("Split command: %v", parts)
	return parts
}

func (r *Ranking) TrackVoiceActivity(s *discordgo.Session) {
	go func() {
		ticker := time.NewTicker(1 * time.Minute)
		defer ticker.Stop()

		for range ticker.C {
			r.mu.Lock()
			now := int(time.Now().Unix())
			for userID, lastTime := range r.voiceAct {
				if now-lastTime >= 60 {
					guilds, err := s.UserGuilds(100, "", "", false)
					if err != nil {
						log.Printf("Error getting guilds for %s: %v", userID, err)
						continue
					}
					inChannel := false
					for _, guild := range guilds {
						guildState, err := s.State.Guild(guild.ID)
						if err != nil {
							continue
						}
						for _, vs := range guildState.VoiceStates {
							if vs.UserID == userID && vs.ChannelID != "" {
								inChannel = true
								break
							}
						}
						if inChannel {
							break
						}
					}
					if inChannel {
						r.UpdateRating(userID, 1)
						r.voiceAct[userID] = now
						log.Printf("User %s earned 5 credits for voice activity", userID)
					} else {
						delete(r.voiceAct, userID)
					}
				}
			}
			r.mu.Unlock()
		}
	}()

	s.AddHandler(func(s *discordgo.Session, v *discordgo.VoiceStateUpdate) {
		if v.UserID == s.State.User.ID {
			return
		}
		r.mu.Lock()
		if v.ChannelID != "" {
			r.UpdateRating(v.UserID, 0)
			r.voiceAct[v.UserID] = int(time.Now().Unix())
		} else {
			delete(r.voiceAct, v.UserID)
		}
		r.mu.Unlock()
	})
}

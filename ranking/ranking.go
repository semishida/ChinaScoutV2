package ranking

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/go-redis/redis/v8"
	"github.com/joho/godotenv"
)

// Ranking —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏, –æ–ø—Ä–æ—Å–∞–º–∏, –∏–≥—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.
type Ranking struct {
	mu                sync.Mutex
	admins            map[string]bool
	polls             map[string]*Poll
	duels             map[string]*Duel
	redis             *redis.Client
	ctx               context.Context
	voiceAct          map[string]int
	redBlackGames     map[string]*RedBlackGame
	blackjackGames    map[string]*BlackjackGame
	floodChannelID    string
	logChannelID      string
	cinemaOptions     []CinemaOption
	pendingCinemaBids map[string]PendingCinemaBid
	cinemaChannelID   string
	Kki               *KKI
}

// NewRanking –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Ranking.
func NewRanking(adminFilePath, redisAddr, floodChannelID, cinemaChannelID string) (*Ranking, error) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	r := &Ranking{
		admins:            make(map[string]bool),
		polls:             make(map[string]*Poll),
		duels:             make(map[string]*Duel),
		voiceAct:          map[string]int{},
		redBlackGames:     make(map[string]*RedBlackGame),
		blackjackGames:    make(map[string]*BlackjackGame),
		ctx:               context.Background(),
		floodChannelID:    floodChannelID,
		logChannelID:      os.Getenv("LOG_CHANNEL_ID"),
		cinemaOptions:     []CinemaOption{},
		pendingCinemaBids: make(map[string]PendingCinemaBid),
		cinemaChannelID:   cinemaChannelID,
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
	var redisErr error
	for i := 0; i < 5; i++ {
		r.redis = redis.NewClient(&redis.Options{
			Addr:     redisAddr,
			Password: os.Getenv("REDIS_PASSWORD"),
		})
		_, redisErr = r.redis.Ping(r.ctx).Result()
		if redisErr == nil {
			break
		}
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis (–ø–æ–ø—ã—Ç–∫–∞ %d/5): %v", i+1, redisErr)
		time.Sleep(5 * time.Second)
	}
	if redisErr != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫: %v", redisErr)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
	file, err := os.Open(adminFilePath)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %v", err)
	}
	defer file.Close()

	var admins struct {
		IDs []string `json:"admin_ids"`
	}
	if err := json.NewDecoder(file).Decode(&admins); err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %v", err)
	}
	for _, id := range admins.IDs {
		r.admins[id] = true
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ cinema options
	r.LoadCinemaOptions()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KKI
	r.Kki, err = NewKKI(r.ctx)
	if err != nil {
		log.Fatalf("Failed to init KKI: %v", err)
	}
	if err := r.Kki.SyncFromSheets(r); err != nil {
		log.Printf("Failed initial sync: %v", err)
	}

	log.Printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥ —Å %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", len(r.admins))
	return r, nil
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
func (r *Ranking) IsAdmin(userID string) bool {
	r.mu.Lock()
	defer r.mu.Unlock()
	isAdmin := r.admins[userID]
	log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ %s: %v", userID, isAdmin)
	return isAdmin
}

// generateGameID —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–≥—Ä—ã.
func generateGameID(playerID string) string {
	rand.Seed(time.Now().UnixNano())
	// –ó–∞–º–µ–Ω—è–µ–º _ –Ω–∞ - –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
	safePlayerID := strings.ReplaceAll(playerID, "_", "-")
	return fmt.Sprintf("%s-%d-%d", safePlayerID, time.Now().UnixNano(), rand.Intn(10000))
}

// generatePollID —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 5-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø—Ä–æ—Å–∞.
func generatePollID() string {
	const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	rand.Seed(time.Now().UnixNano())
	id := make([]byte, 5)
	for i := range id {
		id[i] = letters[rand.Intn(len(letters))]
	}
	return string(id)
}

// LogCreditOperation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤.
func (r *Ranking) LogCreditOperation(s *discordgo.Session, message string) {
	if r.logChannelID != "" {
		_, err := s.ChannelMessageSend(r.logChannelID, message)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª %s: %v", r.logChannelID, err)
		}
	}
}

// GetUserInventory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *Ranking) GetUserInventory(userID string) UserInventory {
	jsonData, err := r.redis.Get(r.ctx, "inventory:"+userID).Bytes()
	if err == redis.Nil {
		return make(UserInventory)
	}
	var inv UserInventory
	if err := json.Unmarshal(jsonData, &inv); err != nil {
		return make(UserInventory)
	}
	return inv
}

// SaveUserInventory —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *Ranking) SaveUserInventory(userID string, inv UserInventory) {
	jsonData, _ := json.Marshal(inv)
	r.redis.Set(r.ctx, "inventory:"+userID, jsonData, 0)
}

// HandleInventoryCommand –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *Ranking) HandleInventoryCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	inv := r.GetUserInventory(m.Author.ID)
	if len(inv) == 0 {
		s.ChannelMessageSend(m.ChannelID, "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.**")
		return
	}

	var lines []string
	for nftID, count := range inv {
		nft, ok := r.Kki.nfts[nftID]
		if !ok {
			continue
		}
		lines = append(lines, fmt.Sprintf("üÉè **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s, %s, x%d) - üí∞ %d", nft.Name, nftID, nft.Rarity, count, nft.Price))
	}
	sort.Strings(lines)
	embed := &discordgo.MessageEmbed{
		Title:       "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å**",
		Description: strings.Join(lines, "\n"),
		Color:       0x00FF00,
		Footer:      &discordgo.MessageEmbedFooter{Text: fmt.Sprintf("–í–ª–∞–¥–µ–ª–µ—Ü: %s", m.Author.Username)},
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

// HandleSellCommand !sell <nftID> <count>
func (r *Ranking) HandleSellCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !sell <nftID> <count>")
		return
	}
	nftID, countStr := parts[1], parts[2]
	count, err := strconv.Atoi(countStr)
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT
	nft, ok := r.Kki.nfts[nftID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inv := r.GetUserInventory(m.Author.ID)
	if inv[nftID] < count {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.**")
		return
	}

	// –†–∞—Å—á—ë—Ç —Å—É–º–º—ã
	sellPrice := nft.Price / 2 * count

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	customID := fmt.Sprintf("sell_confirm_%s_%s_%d_%d", m.Author.ID, nftID, count, sellPrice)
	cancelID := fmt.Sprintf("sell_cancel_%s", m.Author.ID)
	embed := &discordgo.MessageEmbed{
		Title:       "üÉè **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏**",
		Description: fmt.Sprintf("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å %d x **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s) –∑–∞ üí∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤?", count, nft.Name, nftID, sellPrice),
		Color:       RarityColors[nft.Rarity],
		Footer:      &discordgo.MessageEmbedFooter{Text: fmt.Sprintf("–í–ª–∞–¥–µ–ª–µ—Ü: %s", m.Author.Username)},
	}
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
					Style:    discordgo.SuccessButton,
					CustomID: customID,
				},
				discordgo.Button{
					Label:    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
					Style:    discordgo.DangerButton,
					CustomID: cancelID,
				},
			},
		},
	}
	s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Embed:      embed,
		Components: components,
	})
}

// HandleSellConfirm –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
func (r *Ranking) HandleSellConfirm(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) != 6 {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏.**"},
		})
		return
	}
	userID, nftID, countStr, sellPriceStr := parts[2], parts[3], parts[4], parts[5]
	count, err := strconv.Atoi(countStr)
	if err != nil {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå **–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**"},
		})
		return
	}
	sellPrice, err := strconv.Atoi(sellPriceStr)
	if err != nil {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå **–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.**"},
		})
		return
	}

	inv := r.GetUserInventory(userID)
	if inv[nftID] < count {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NFT.**"},
		})
		return
	}

	// –£–º–µ–Ω—å—à–µ–Ω–∏–µ NFT
	inv[nftID] -= count
	if inv[nftID] == 0 {
		delete(inv, nftID)
	}
	r.SaveUserInventory(userID, inv)

	// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
	currentCoins, _ := r.redis.Get(r.ctx, "coins:"+userID).Int()
	r.redis.Set(r.ctx, "coins:"+userID, currentCoins+sellPrice, 0)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
	nft := r.Kki.nfts[nftID]
	r.LogCreditOperation(s, fmt.Sprintf("üÉè **%s** –ø—Ä–æ–¥–∞–ª %d x **%s** (ID: %s) –∑–∞ üí∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤.", i.Member.User.Username, count, nft.Name, nftID, sellPrice))

	// –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: fmt.Sprintf("‚úÖ **–ü—Ä–æ–¥–∞–Ω–æ** %d x üÉè **%s** (ID: %s) –∑–∞ üí∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤!", count, nft.Name, nftID, sellPrice),
		},
	})
}

// HandleSellCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
func (r *Ranking) HandleSellCancel(s *discordgo.Session, i *discordgo.InteractionCreate) {
	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{Content: "‚ùå **–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.**"},
	})
}

// HandleTradeNFTCommand !trade_nft <@user> <nftID> <count>
func (r *Ranking) HandleTradeNFTCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !trade_nft @user <nftID> <count>")
		return
	}
	targetID := m.Mentions[0].ID
	if targetID == m.Author.ID {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å NFT —Å–µ–±–µ.**")
		return
	}
	parts := strings.Fields(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !trade_nft @user <nftID> <count>")
		return
	}
	nftID, countStr := parts[2], parts[3]
	count, err := strconv.Atoi(countStr)
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT
	nft, ok := r.Kki.nfts[nftID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inv := r.GetUserInventory(m.Author.ID)
	if inv[nftID] < count {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NFT –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.**")
		return
	}

	// –ü–µ—Ä–µ–¥–∞—á–∞ NFT
	inv[nftID] -= count
	if inv[nftID] == 0 {
		delete(inv, nftID)
	}
	r.SaveUserInventory(m.Author.ID, inv)

	targetInv := r.GetUserInventory(targetID)
	targetInv[nftID] += count
	r.SaveUserInventory(targetID, targetInv)

	// –û—Ç–≤–µ—Ç
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ **–ü–µ—Ä–µ–¥–∞–Ω–æ** %d x üÉè **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@%s>.", count, nft.Name, nftID, targetID))
}

// HandleCaseTradeCommand !case_trade <@user> <caseID> <count>
func (r *Ranking) HandleCaseTradeCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !case_trade @user <caseID> <count>")
		return
	}
	sellerID := m.Mentions[0].ID
	if sellerID == m.Author.ID {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∫–µ–π—Å —É —Å–µ–±—è.**")
		return
	}
	parts := strings.Fields(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !case_trade @user <caseID> <count>")
		return
	}
	caseID := parts[2]
	count, err := strconv.Atoi(parts[3])
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**")
		return
	}

	kase, ok := r.Kki.cases[caseID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–µ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	sellerInv := r.Kki.GetUserCaseInventory(r, sellerID)
	if sellerInv[caseID] < count {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–µ–π—Å–æ–≤.**")
		return
	}

	price := kase.Price * count
	buyerCoins, _ := r.redis.Get(r.ctx, "coins:"+m.Author.ID).Int()
	if buyerCoins < price {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤.**")
		return
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
	r.redis.Set(r.ctx, "coins:"+m.Author.ID, buyerCoins-price, 0)
	sellerCoins, _ := r.redis.Get(r.ctx, "coins:"+sellerID).Int()
	r.redis.Set(r.ctx, "coins:"+sellerID, sellerCoins+price, 0)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	buyerInv := r.Kki.GetUserCaseInventory(r, m.Author.ID)
	buyerInv[caseID] += count
	r.Kki.SaveUserCaseInventory(r, m.Author.ID, buyerInv)

	sellerInv[caseID] -= count
	if sellerInv[caseID] == 0 {
		delete(sellerInv, caseID)
	}
	r.Kki.SaveUserCaseInventory(r, sellerID, sellerInv)

	// –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏
	r.LogCreditOperation(s, fmt.Sprintf("üõí **%s** –∫—É–ø–∏–ª %d x üì¶ **%s** (ID: %s) —É <@%s> –∑–∞ üí∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤.", m.Author.Username, count, kase.Name, caseID, sellerID, price))

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üõí **–ö—É–ø–ª–µ–Ω–æ** %d x üì¶ **%s** (ID –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–ø–µ—Ä–µ–¥–∞—á–∏: %s) —É <@%s> –∑–∞ üí∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤.", count, kase.Name, caseID, sellerID, price))
}

// HandleOpenCaseCommand !open_case <caseID>
func (r *Ranking) HandleOpenCaseCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Split(command, " ")
	if len(parts) < 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !open_case <caseID>")
		return
	}
	caseID := parts[1]
	kase, ok := r.Kki.cases[caseID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–µ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–µ–π—Å–æ–≤
	userCaseInv := r.Kki.GetUserCaseInventory(r, m.Author.ID)
	if userCaseInv[caseID] < 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞.**")
		return
	}
	userCaseInv[caseID]--
	if userCaseInv[caseID] == 0 {
		delete(userCaseInv, caseID)
	}
	r.Kki.SaveUserCaseInventory(r, m.Author.ID, userCaseInv)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
	key := fmt.Sprintf("case_limit:%s:%s", m.Author.ID, time.Now().Format("2006-01-02"))
	opened, _ := r.redis.Get(r.ctx, key).Int()
	if opened >= 5 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (5 –∫–µ–π—Å–æ–≤ –≤ –¥–µ–Ω—å).**")
		return
	}
	r.redis.Incr(r.ctx, key)
	r.redis.Expire(r.ctx, key, 24*time.Hour)

	// –ù–∞—á–∞–ª–æ –∞–Ω–∏–º–∞—Ü–∏–∏
	animMsg, _ := s.ChannelMessageSend(m.ChannelID, "üé∞ **–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...**")
	collections := strings.Split(kase.ContainedCollections, ",")
	var possibleNFTs []NFT
	for _, nft := range r.Kki.nfts {
		for _, col := range collections {
			if nft.Collection == col && (caseID != "daily" || nft.Collection != "holiday") {
				possibleNFTs = append(possibleNFTs, nft)
				break
			}
		}
	}
	if len(possibleNFTs) == 0 {
		s.ChannelMessageEdit(m.ChannelID, animMsg.ID, "‚ùå **–í –∫–µ–π—Å–µ –Ω–µ—Ç NFT.**")
		return
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ 5 NFT
	var dropped []NFT
	for i := 0; i < 5; i++ {
		dropped = append(dropped, r.rollNFT(possibleNFTs))
	}

	// –ê–Ω–∏–º–∞—Ü–∏—è –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		rarities := []string{"Common", "Rare", "Super-rare", "Epic", "Nephrite", "Exotic", "LEGENDARY"}
		for i := 0; i < 10; i++ {
			randRarity := rarities[rand.Intn(len(rarities))]
			embed := &discordgo.MessageEmbed{
				Description: fmt.Sprintf("üé∞ **–ö—Ä—É—Ç–∏–º...** %s", randRarity),
				Color:       RarityColors[randRarity],
			}
			s.ChannelMessageEditEmbed(m.ChannelID, animMsg.ID, embed)
			time.Sleep(300 * time.Millisecond)
		}

		// –ü–æ–∫–∞–∑ –≤—ã–ø–∞–≤—à–∏—Ö NFT
		var lines []string
		inv := r.GetUserInventory(m.Author.ID)
		for _, nft := range dropped {
			wasEmpty := inv[nft.ID] == 0
			inv[nft.ID]++
			newTag := ""
			if wasEmpty {
				newTag = "\n**–ù–æ–≤–∞—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!** üéâ"
			}
			embed := &discordgo.MessageEmbed{
				Title:       fmt.Sprintf("üéâ **–í—ã–ø–∞–ª–æ**: %s (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s)", nft.Name, nft.ID),
				Description: fmt.Sprintf("**–†–µ–¥–∫–æ—Å—Ç—å**: %s\n**–û–ø–∏—Å–∞–Ω–∏–µ**: %s\n**–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞**: %s\n**–¶–µ–Ω–∞**: üí∞ %d\n**–ö–æ–ª–ª–µ–∫—Ü–∏—è**: %s%s", nft.Rarity, nft.Description, nft.ReleaseDate, nft.Price, nft.Collection, newTag),
				Color:       RarityColors[nft.Rarity],
				Image:       &discordgo.MessageEmbedImage{URL: nft.ImageURL},
				Footer:      &discordgo.MessageEmbedFooter{Text: fmt.Sprintf("–í–ª–∞–¥–µ–ª–µ—Ü: %s", m.Author.Username)},
			}
			msg, err := s.ChannelMessageSendEmbed(m.ChannelID, embed)
			if err == nil {
				go func(msgID string) {
					time.Sleep(5 * time.Second)
					if err := s.ChannelMessageDelete(m.ChannelID, msgID); err != nil {
						log.Printf("Failed to delete message %s: %v", msgID, err)
					}
				}(msg.ID)
			} else {
				log.Printf("Failed to send embed for NFT %s: %v", nft.ID, err)
			}
			lines = append(lines, fmt.Sprintf("%s (ID: %s)", nft.Name, nft.ID))
			time.Sleep(1 * time.Second)
		}
		r.SaveUserInventory(m.Author.ID, inv)
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üéâ **–í—ã –ø–æ–ª—É—á–∏–ª–∏**: %s", strings.Join(lines, ", ")))
	}()
}

// rollNFT –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π NFT —Å —É—á—ë—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
func (r *Ranking) rollNFT(possible []NFT) NFT {
	totalProb := 0.0
	for _, p := range RarityProbabilities {
		totalProb += p.Prob
	}
	roll := rand.Float64() * totalProb
	cum := 0.0
	var selectedRarity string
	for _, p := range RarityProbabilities {
		cum += p.Prob
		if roll <= cum {
			selectedRarity = p.Rarity
			break
		}
	}

	var candidates []NFT
	for _, nft := range possible {
		if nft.Rarity == selectedRarity {
			candidates = append(candidates, nft)
		}
	}
	if len(candidates) == 0 {
		return possible[rand.Intn(len(possible))]
	}
	return candidates[rand.Intn(len(candidates))]
}

// HandleDailyCaseCommand !daily_case
func (r *Ranking) HandleDailyCaseCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	key := fmt.Sprintf("daily_case:%s:%s", m.Author.ID, time.Now().Format("2006-01-02"))
	if r.redis.Exists(r.ctx, key).Val() > 0 {
		s.ChannelMessageSend(m.ChannelID, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.")
		return
	}

	userCaseInv := r.Kki.GetUserCaseInventory(r, m.Author.ID)
	userCaseInv["daily"]++
	r.Kki.SaveUserCaseInventory(r, m.Author.ID, userCaseInv)
	r.redis.Set(r.ctx, key, "claimed", 24*time.Hour)

	s.ChannelMessageSend(m.ChannelID, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !open_case daily –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.")
}

// HandleBuyCaseFromCommand !buy_case_from <@user> <caseID> <count>
func (r *Ranking) HandleBuyCaseFromCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Split(command, " ")
	if len(parts) < 4 {
		s.ChannelMessageSend(m.ChannelID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !buy_case_from @user <caseID> <count>")
		return
	}
	sellerID := strings.Trim(parts[1], "<@!>")
	caseID := parts[2]
	count, _ := strconv.Atoi(parts[3])

	kase, ok := r.Kki.cases[caseID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–µ–π—Å.")
		return
	}

	sellerInv := r.Kki.GetUserCaseInventory(r, sellerID)
	if sellerInv[caseID] < count {
		s.ChannelMessageSend(m.ChannelID, "–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–µ–π—Å–æ–≤.")
		return
	}

	price := kase.Price * count
	r.LogCreditOperation(s, fmt.Sprintf("%s –∫—É–ø–∏–ª %d x %s —É %s –∑–∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤", m.Author.Username, count, kase.Name, sellerID, price))

	buyerInv := r.Kki.GetUserCaseInventory(r, m.Author.ID)
	buyerInv[caseID] += count
	r.Kki.SaveUserCaseInventory(r, m.Author.ID, buyerInv)

	sellerInv[caseID] -= count
	if sellerInv[caseID] == 0 {
		delete(sellerInv, caseID)
	}
	r.Kki.SaveUserCaseInventory(r, sellerID, sellerInv)

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ö—É–ø–ª–µ–Ω–æ %d x %s —É <@%s> –∑–∞ %d –∫—Ä–µ–¥–∏—Ç–æ–≤.", count, kase.Name, sellerID, price))
}

// HandleAdminGiveCase !admin_give_case <userID> <caseID>
func (r *Ranking) HandleAdminGiveCase(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !a_give_case @user <caseID>")
		return
	}
	userID := m.Mentions[0].ID
	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !a_give_case @user <caseID>")
		return
	}
	caseID := parts[2]
	kase, exists := r.Kki.cases[caseID]
	if !exists {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}
	inv := r.Kki.GetUserCaseInventory(r, userID)
	inv[caseID]++
	r.Kki.SaveUserCaseInventory(r, userID, inv)
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ **–í—ã–¥–∞–Ω** üì¶ **%s** (ID –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–ø–µ—Ä–µ–¥–∞—á–∏: %s) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@%s>.", kase.Name, caseID, userID))
}

// HandleAdminGiveNFT !admin_give_nft <userID> <nftID> <count>
func (r *Ranking) HandleAdminGiveNFT(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !a_give_nft @user <nftID> <count>")
		return
	}
	userID := m.Mentions[0].ID
	parts := strings.Fields(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !a_give_nft @user <nftID> <count>")
		return
	}
	nftID, countStr := parts[2], parts[3]
	count, err := strconv.Atoi(countStr)
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT
	nft, ok := r.Kki.nfts[nftID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	inv := r.GetUserInventory(userID)
	inv[nftID] += count
	r.SaveUserInventory(userID, inv)

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ **–í—ã–¥–∞–Ω–æ** %d x üÉè **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@%s>.", count, nft.Name, nftID, userID))
}

// HandleAdminRemoveNFT !a_remove_nft <@user> <nftID> <count>
func (r *Ranking) HandleAdminRemoveNFT(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !a_remove_nft @user <nftID> <count>")
		return
	}
	userID := m.Mentions[0].ID
	parts := strings.Fields(command)
	if len(parts) != 4 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !a_remove_nft @user <nftID> <count>")
		return
	}
	nftID, countStr := parts[2], parts[3]
	count, err := strconv.Atoi(countStr)
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT
	nft, ok := r.Kki.nfts[nftID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	inv := r.GetUserInventory(userID)
	if inv[nftID] < count {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NFT.**")
		return
	}
	inv[nftID] -= count
	if inv[nftID] == 0 {
		delete(inv, nftID)
	}
	r.SaveUserInventory(userID, inv)

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ **–£–¥–∞–ª–µ–Ω–æ** %d x üÉè **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s) —É <@%s>.", count, nft.Name, nftID, userID))
}

// HandleAdminHolidayCase !a_holiday_case <@user> <count>
func (r *Ranking) HandleAdminHolidayCase(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	if len(m.Mentions) != 1 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–£–ø–æ–º—è–Ω–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: !a_holiday_case @user <count>")
		return
	}
	userID := m.Mentions[0].ID
	parts := strings.Fields(command)
	if len(parts) != 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !a_holiday_case @user <count>")
		return
	}
	count, err := strconv.Atoi(parts[2])
	if err != nil || count <= 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.**")
		return
	}

	inv := r.Kki.GetUserCaseInventory(r, userID)
	inv["holiday_case"] += count
	r.Kki.SaveUserCaseInventory(r, userID, inv)

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ **–í—ã–¥–∞–Ω–æ** %d x üì¶ **–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–µ–π—Å** (ID –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–ø–µ—Ä–µ–¥–∞—á–∏: holiday_case) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@%s>.", count, userID))
}

// HandleShowNFTCommand !show_nft <nftID>
func (r *Ranking) HandleShowNFTCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) != 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**: !nft_show <nftID>")
		return
	}
	nftID := parts[1]
	nft, ok := r.Kki.nfts[nftID]
	if !ok {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.**")
		return
	}

	embed := &discordgo.MessageEmbed{
		Title:       fmt.Sprintf("üÉè **%s** (ID –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏: %s)", nft.Name, nftID),
		Description: fmt.Sprintf("**–û–ø–∏—Å–∞–Ω–∏–µ**: %s\n**–†–µ–¥–∫–æ—Å—Ç—å**: %s\n**–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞**: %s\n**–¶–µ–Ω–∞**: üí∞ %d\n**–ö–æ–ª–ª–µ–∫—Ü–∏—è**: %s", nft.Description, nft.Rarity, nft.ReleaseDate, nft.Price, nft.Collection),
		Color:       RarityColors[nft.Rarity],
		Image:       &discordgo.MessageEmbedImage{URL: nft.ImageURL},
		Footer:      &discordgo.MessageEmbedFooter{Text: fmt.Sprintf("–ü–æ—Ö–≤–∞—Å—Ç–∞–ª—Å—è: %s", m.Author.Username)},
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

// ClearAllUserNFTs –æ—á–∏—â–∞–µ—Ç –≤—Å–µ NFT –∏ –∫–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
func (r *Ranking) ClearAllUserNFTs(s *discordgo.Session, m *discordgo.MessageCreate) {
	keys, _ := r.redis.Keys(r.ctx, "inventory:*").Result()
	for _, key := range keys {
		r.redis.Del(r.ctx, key)
	}
	keys, _ = r.redis.Keys(r.ctx, "case_inventory:*").Result()
	for _, key := range keys {
		r.redis.Del(r.ctx, key)
	}
	keys, _ = r.redis.Keys(r.ctx, "case_limit:*").Result()
	for _, key := range keys {
		r.redis.Del(r.ctx, key)
	}
	keys, _ = r.redis.Keys(r.ctx, "daily_case:*").Result()
	for _, key := range keys {
		r.redis.Del(r.ctx, key)
	}
	s.ChannelMessageSend(m.ChannelID, "–í—Å–µ NFT, –∫–µ–π—Å—ã –∏ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã.")
}

func (r *Ranking) HandleCaseInventoryCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	inv := r.Kki.GetUserCaseInventory(r, m.Author.ID)
	if len(inv) == 0 {
		s.ChannelMessageSend(m.ChannelID, "üì¶ **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–µ–π—Å–æ–≤ –ø—É—Å—Ç.**")
		return
	}

	var lines []string
	for caseID, count := range inv {
		kase, ok := r.Kki.cases[caseID]
		if !ok {
			continue
		}
		lines = append(lines, fmt.Sprintf("üì¶ **%s** (ID –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–ø–µ—Ä–µ–¥–∞—á–∏: %s, x%d) - üí∞ %d", kase.Name, caseID, count, kase.Price))
	}
	sort.Strings(lines)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
	key := fmt.Sprintf("case_limit:%s:%s", m.Author.ID, time.Now().Format("2006-01-02"))
	opened, _ := r.redis.Get(r.ctx, key).Int()
	limitMsg := fmt.Sprintf("üîÑ **–õ–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è**: %d/5", opened)

	embed := &discordgo.MessageEmbed{
		Title:       "üì¶ **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–µ–π—Å–æ–≤**",
		Description: strings.Join(lines, "\n") + "\n\n" + limitMsg,
		Color:       0x00BFFF,
		Footer:      &discordgo.MessageEmbedFooter{Text: fmt.Sprintf("–í–ª–∞–¥–µ–ª–µ—Ü: %s", m.Author.Username)},
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

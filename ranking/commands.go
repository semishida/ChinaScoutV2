package ranking

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/redis/go-redis/v9"

	"github.com/bwmarrin/discordgo"
)

// HandleChinaCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !china.
func (r *Ranking) HandleChinaCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !china –æ—Ç %s", m.Author.ID)
	parts := strings.Fields(m.Content)
	userID := m.Author.ID
	username := m.Author.Username

	if len(parts) > 1 {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ <@id> –∏–ª–∏ <@!id>
		target := parts[1]
		target = strings.TrimPrefix(target, "<@")
		target = strings.TrimPrefix(target, "!")
		target = strings.TrimSuffix(target, ">")
		if target == "" || !isValidUserID(target) {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `!china @id`")
			return
		}
		userID = target
		var err error
		username, err = getUsername(s, userID)
		if err != nil {
			username = "<@" + userID + ">"
		}
	}

	userRating := r.GetRating(userID)
	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("üí∞ %s, –±–∞–ª–∞–Ω—Å: **%d** —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤! üá®üá≥", username, userRating))
}

// isValidUserID –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func isValidUserID(id string) bool {
	if len(id) < 17 || len(id) > 20 { // Discord ID –æ–±—ã—á–Ω–æ 17‚Äì20 —Ü–∏—Ñ—Ä
		return false
	}
	_, err := strconv.ParseUint(id, 10, 64)
	return err == nil
}

func (r *Ranking) HandleTransferCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: %s –æ—Ç %s", command, m.Author.ID)

	parts := strings.Fields(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "–ï–±–∞–Ω–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π `!transfer @id —Å—É–º–º–∞ [–ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å]`")
		return
	}

	targetID := strings.TrimPrefix(parts[1], "<@")
	targetID = strings.TrimPrefix(targetID, ">")
	targetID = strings.TrimSuffix(targetID, "!")

	if targetID == m.Author.ID {
		s.ChannelMessageSend(m.ChannelID, "–¢—ã –±–∞–≥–∏ –∏—â–µ—à—å? –ó–∞ —â–µ–∫–æ–π —É —Å–µ–±—è –ø–æ–∏—â–∏! –°–∞–º–æ–º—É —Å–µ–±–µ –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Å–∞—Ç—å, –∞ –Ω–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç—ã")
		return
	}

	if !isValidUserID(targetID) {
		s.ChannelMessageSend(m.ChannelID, "–ù–µ, —è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç ID, –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω? –ò—Å–ø–æ–ª—å–∑—É–π `!transfer @id —Å—É–º–º–∞ [–ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å]`")
	}

	amount, err := strconv.Atoi(parts[2])
	if err != nil || amount <= 0 {
		s.ChannelMessageSend(m.ChannelID, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	reason := ""
	if len(parts) > 3 {
		reason = strings.Join(parts[3:], " ")
	}

	r.UpdateRating(m.Author.ID, -amount)
	r.UpdateRating(targetID, amount)

	targetUsername, err := getUsername(s, targetID)
	if err != nil {
		targetUsername = "<@" + targetID + ">"
	}

	msg := fmt.Sprintf("‚úÖ <%s> –ø–µ—Ä–µ–¥–∞–ª %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s!", m.Author.ID, amount, targetUsername)
	if reason != "" {
		msg += fmt.Sprintf("\n üóíÔ∏è –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	}
	s.ChannelMessageSend(m.ChannelID, msg)
	r.LogCreditOperation(s, fmt.Sprintf("<%s> –ø–µ—Ä–µ–¥–∞–µ—Ç %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@%s>%s", m.Author.ID, amount, targetID, formatReason(reason)))
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–µ—Ä–µ–¥–∞–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤ %s (–ü—Ä–∏—á–∏–Ω–∞: %s)", m.Author.ID, amount, targetID, reason)
}

// HandleTopCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !top.
func (r *Ranking) HandleTopCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !top –æ—Ç %s", m.Author.ID)
	topUsers := r.GetTop5()
	if len(topUsers) == 0 {
		s.ChannelMessageSend(m.ChannelID, "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤! –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üòé")
		return
	}

	response := "üèÜ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
	for i, user := range topUsers {
		response += fmt.Sprintf("%d. <@%s> ‚Äî %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", i+1, user.ID, user.Rating)
	}
	s.ChannelMessageSend(m.ChannelID, response)
}

// getUsername –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.
func getUsername(s *discordgo.Session, userID string) (string, error) {
	user, err := s.User(userID)
	if err != nil {
		return "", err
	}
	return user.Username, nil
}

// formatTime —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
func formatTime(seconds int) string {
	if seconds < 60 {
		return fmt.Sprintf("%d —Å–µ–∫—É–Ω–¥", seconds)
	}
	minutes := seconds / 60
	seconds = seconds % 60
	if minutes < 60 {
		if seconds == 0 {
			return fmt.Sprintf("%d –º–∏–Ω—É—Ç", minutes)
		}
		return fmt.Sprintf("%d –º–∏–Ω—É—Ç %d —Å–µ–∫—É–Ω–¥", minutes, seconds)
	}
	hours := minutes / 60
	minutes = minutes % 60
	if minutes == 0 && seconds == 0 {
		return fmt.Sprintf("%d —á–∞—Å–æ–≤", hours)
	}
	if seconds == 0 {
		return fmt.Sprintf("%d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç", hours, minutes)
	}
	return fmt.Sprintf("%d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç %d —Å–µ–∫—É–Ω–¥", hours, minutes, seconds)
}

// HandleAdminCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !admin.
func (r *Ranking) HandleAdminCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !admin: %s –æ—Ç %s", command, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∏—â–∏-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–∑–¥–∞–≤–∞—Ç—å –ø–ª—é—à–∫–∏! üîí")
		return
	}

	parts := strings.Fields(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!admin @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]`")
		return
	}

	targetID := strings.TrimPrefix(parts[1], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	amount, err := strconv.Atoi(parts[2])
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! üí∏")
		return
	}

	reason := ""
	if len(parts) > 3 {
		reason = strings.Join(parts[3:], " ")
	}

	r.UpdateRating(targetID, amount)
	targetUsername, err := getUsername(s, targetID)
	if err != nil {
		targetUsername = "<@" + targetID + ">"
	}
	var msg string
	if amount >= 0 {
		msg = fmt.Sprintf("‚úÖ %s –ø–æ–ª—É—á–∏–ª %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞! üéâ", targetUsername, amount)
	} else {
		msg = fmt.Sprintf("‚úÖ –£ %s –∑–∞–±—Ä–∞–Ω–æ %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º! üîΩ", targetUsername, -amount)
	}
	if reason != "" {
		msg += fmt.Sprintf("\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	}
	s.ChannelMessageSend(m.ChannelID, msg)
	r.LogCreditOperation(s, fmt.Sprintf("–ê–¥–º–∏–Ω <@%s> –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å %s: %+d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤%s", m.Author.ID, targetUsername, amount, formatReason(reason)))
	log.Printf("–ê–¥–º–∏–Ω %s –∏–∑–º–µ–Ω–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ %s –Ω–∞ %d (–ø—Ä–∏—á–∏–Ω–∞: %s)", m.Author.ID, targetID, amount, reason)
}
// HandleAdminMassCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !adminmass.
func (r *Ranking) HandleAdminMassCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !adminmass: %s –æ—Ç %s", command, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∏—â–∏-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏! üîí")
		return
	}

	parts := strings.Fields(command)
	if len(parts) < 3 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!adminmass <+|-|=><—Å—É–º–º–∞> @id1 @id2 ... [–ø—Ä–∏—á–∏–Ω–∞]`")
		return
	}

	operation := parts[1]
	if !strings.HasPrefix(operation, "+") && !strings.HasPrefix(operation, "-") && !strings.HasPrefix(operation, "=") {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +, - –∏–ª–∏ =!")
		return
	}
	amountStr := operation[1:]
	amount, err := strconv.Atoi(amountStr)
	if err != nil || amount < 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	var userIDs []string
	var reason string
	for i, part := range parts[2:] {
		if !strings.HasPrefix(part, "<@") {
			reason = strings.Join(parts[i+2:], " ")
			break
		}
		id := strings.TrimPrefix(part, "<@")
		id = strings.TrimSuffix(id, ">")
		id = strings.TrimPrefix(id, "!")
		userIDs = append(userIDs, id)
	}

	if len(userIDs) == 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
		return
	}

	response := "‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n"
	for _, userID := range userIDs {
		username, err := getUsername(s, userID)
		if err != nil {
			username = "<@" + userID + ">"
		}
		switch operation[0] {
		case '+':
			r.UpdateRating(userID, amount)
			response += fmt.Sprintf("%s: +%d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", username, amount)
			r.LogCreditOperation(s, fmt.Sprintf("–ê–¥–º–∏–Ω <@%s> –¥–æ–±–∞–≤–∏–ª %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ %s%s", m.Author.ID, amount, username, formatReason(reason)))
		case '-':
			r.UpdateRating(userID, -amount)
			response += fmt.Sprintf("%s: -%d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", username, amount)
			r.LogCreditOperation(s, fmt.Sprintf("–ê–¥–º–∏–Ω <@%s> —É–¥–∞–ª–∏–ª %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ —É %s%s", m.Author.ID, amount, username, formatReason(reason)))
		case '=':
			currentRating := r.GetRating(userID)
			r.UpdateRating(userID, amount-currentRating)
			response += fmt.Sprintf("%s: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n", username, amount)
			r.LogCreditOperation(s, fmt.Sprintf("–ê–¥–º–∏–Ω <@%s> —É—Å—Ç–∞–Ω–æ–≤–∏–ª %d —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è %s%s", m.Author.ID, amount, username, formatReason(reason)))
		}
	}
	if reason != "" {
		response += fmt.Sprintf("\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s", reason)
	}

	s.ChannelMessageSend(m.ChannelID, response)
	log.Printf("–ê–¥–º–∏–Ω %s –≤—ã–ø–æ–ª–Ω–∏–ª –º–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: %s", m.Author.ID, command)
}

// formatReason —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ª–æ–≥–æ–≤.
func formatReason(reason string) string {
	if reason == "" {
		return ""
	}
	return fmt.Sprintf(" (–ø—Ä–∏—á–∏–Ω–∞: %s)", reason)
}

// HandleStatsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !stats.
func (r *Ranking) HandleStatsCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !stats –æ—Ç %s", m.Author.ID)

	parts := strings.Fields(m.Content)
	targetID := m.Author.ID
	targetUsername := m.Author.Username

	if len(parts) > 1 {
		targetID = strings.TrimPrefix(parts[1], "<@")
		targetID = strings.TrimSuffix(targetID, ">")
		targetID = strings.TrimPrefix(targetID, "!")
		if !isValidUserID(targetID) {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π: `!stats [@id]`")
			return
		}
		var err error
		targetUsername, err = getUsername(s, targetID)
		if err != nil {
			targetUsername = "<@" + targetID + ">"
		}
	}

	user := User{ID: targetID}
	data, err := r.redis.Get(r.ctx, "user:"+targetID).Result()
	if err == redis.Nil {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! üò¢", targetUsername))
		return
	} else if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑ Redis: %v", targetID, err)
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Redis-—Å–µ—Ä–≤–µ—Ä.")
		return
	}

	if err := json.Unmarshal([]byte(data), &user); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", targetID, err)
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
		return
	}

	embed := &discordgo.MessageEmbed{
		Title:       fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s", targetUsername),
		Description: "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –º–∏—Ä–µ —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤! üåü",
		Color:       0xFFD700, // –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç
		Thumbnail: &discordgo.MessageEmbedThumbnail{
			URL: "https://i.imgur.com/your-bot-icon.png", // –ó–∞–º–µ–Ω–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –±–æ—Ç–∞
		},
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "üí∞ –ë–∞–ª–∞–Ω—Å",
				Value:  fmt.Sprintf("**%d** —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤", user.Rating),
				Inline: false,
			},
			{
				Name:   "‚öîÔ∏è –î—É—ç–ª–∏",
				Value:  fmt.Sprintf("–°—ã–≥—Ä–∞–Ω–æ: **%d**\n–ü–æ–±–µ–¥: **%d**", user.DuelsPlayed, user.DuelsWon),
				Inline: true,
			},
			{
				Name:   "üî¥‚ö´Ô∏è RedBlack",
				Value:  fmt.Sprintf("–°—ã–≥—Ä–∞–Ω–æ: **%d**\n–ü–æ–±–µ–¥: **%d**", user.RBPlayed, user.RBWon),
				Inline: true,
			},
			{
				Name:   "‚ô†Ô∏è Blackjack",
				Value:  fmt.Sprintf("–°—ã–≥—Ä–∞–Ω–æ: **%d**\n–ü–æ–±–µ–¥: **%d**", user.BJPlayed, user.BJWon),
				Inline: true,
			},
			{
				Name:   "üéô –í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
				Value:  fmt.Sprintf("**%s**", formatTime(user.VoiceSeconds)),
				Inline: false,
			},
		},
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞! üëë | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
		},
		Timestamp: time.Now().Format(time.RFC3339),
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

// HandleChelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !chelp.
func (r *Ranking) HandleChelpCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !chelp –æ—Ç %s", m.Author.ID)

	embed := &discordgo.MessageEmbed{
		Title:       "üìú –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ ChinaBot üá®üá≥",
		Description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–æ—Ü–∫—Ä–µ–¥–∏—Ç–æ–≤! –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–∫–æ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥! üöÄ",
		Color:       0xFFD700, // –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç
		Thumbnail: &discordgo.MessageEmbedThumbnail{
			URL: "https://i.imgur.com/your-bot-icon.png", // –ó–∞–º–µ–Ω–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –±–æ—Ç–∞
		},
		Fields: []*discordgo.MessageEmbedField{
			{Name: "üí∞ !china [@id]", Value: "–£–∑–Ω–∞–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.", Inline: false},
			{Name: "üèÜ !top", Value: "–ü–æ—Å–º–æ—Ç—Ä–∏ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º.", Inline: false},
			{Name: "üìä !stats", Value: "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –∫—Ä–µ–¥–∏—Ç—ã, –∏–≥—Ä—ã, –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.", Inline: false},
			{Name: "üìä !adminstats @id <–∏–≥—Ä–∞> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>", Value: "–ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üìú !transfer @id <—Å—É–º–º–∞> <–ø—Ä–∏—á–∏–Ω–∞>", Value: "–ü–µ—Ä–µ–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥—Ä—É–≥–æ–º—É", Inline: false},
			{Name: "üìù !cpoll –í–æ–ø—Ä–æ—Å [–í–∞—Ä–∏–∞–Ω—Ç1] [–í–∞—Ä–∏–∞–Ω—Ç2] ...", Value: "–°–æ–∑–¥–∞–π –æ–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üí∏ !dep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä_–≤–∞—Ä–∏–∞–Ω—Ç–∞> <—Å—É–º–º–∞>", Value: "–ü–æ—Å—Ç–∞–≤—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –≤ –æ–ø—Ä–æ—Å–µ.", Inline: false},
			{Name: "üîí !closedep <ID_–æ–ø—Ä–æ—Å–∞> <–Ω–æ–º–µ—Ä>", Value: "–ó–∞–∫—Ä–æ–π –æ–ø—Ä–æ—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üìã !polls", Value: "–ü–æ—Å–º–æ—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã.", Inline: false},
			{Name: "üé∞ !rb", Value: "–ù–∞—á–Ω–∏ –∏–≥—Ä—É –≤ –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π.", Inline: false},
			{Name: "üî¥‚ö´ !rb <red/black> <—Å—É–º–º–∞>", Value: "–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –≤ –ö—Ä–∞—Å–Ω—ã–π-–ß—ë—Ä–Ω—ã–π.", Inline: false},
			{Name: "‚ô†Ô∏è !blackjack", Value: "–ù–∞—á–Ω–∏ –∏–≥—Ä—É –≤ –ë–ª—ç–∫–¥–∂–µ–∫.", Inline: false},
			{Name: "üé≤ !blackjack <—Å—É–º–º–∞>", Value: "–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –≤ –ë–ª—ç–∫–¥–∂–µ–∫–µ.", Inline: false},
			{Name: "‚öîÔ∏è !duel <—Å—É–º–º–∞>", Value: "–í—ã–∑–æ–≤–∏ –ª—é–±–æ–≥–æ –Ω–∞ –¥—É—ç–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π.", Inline: false},
			{Name: "üéÅ !admin @id <—Å—É–º–º–∞> [–ø—Ä–∏—á–∏–Ω–∞]", Value: "–ù–∞—á–∏—Å–ª–∏ –∏–ª–∏ –∑–∞–±–µ—Ä–∏ –∫—Ä–µ–¥–∏—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "‚öôÔ∏è !adminmass <+/-/=—Å—É–º–º–∞> @id1 @id2 ... [–ø—Ä–∏—á–∏–Ω–∞]", Value: "–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üö´ !endblackjack @id", Value: "–ó–∞–≤–µ—Ä—à–∏ –∏–≥—Ä—É –≤ –ë–ª—ç–∫–¥–∂–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üìú !chelp", Value: "–ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.", Inline: false},
			{Name: "üé• !cinema <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞>", Value: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–∏–Ω–æ–∞—É–∫—Ü–∏–æ–Ω.", Inline: false},
			{Name: "üé• !betcinema <–Ω–æ–º–µ—Ä> <—Å—É–º–º–∞>", Value: "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.", Inline: false},
			{Name: "üìã !cinemalist", Value: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.", Inline: false},
			{Name: "üìã !admincinemalist", Value: "–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üóëÔ∏è !removelowest <—á–∏—Å–ª–æ>", Value: "–£–¥–∞–ª–∏—Ç—å <—á–∏—Å–ª–æ> —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "‚öôÔ∏è !adjustcinema <–Ω–æ–º–µ—Ä> <+/-—Å—É–º–º–∞>", Value: "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –ª—é–±–æ–≥–æ –∫–∏–Ω–æ-–≤–∞—Ä–∏–∞–Ω—Ç–∞ (–∞–¥–º–∏–Ω—ã).", Inline: false},
			{Name: "üóëÔ∏è !removecinema @id <–Ω–æ–º–µ—Ä>", Value: "–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∞–¥–º–∏–Ω—ã).", Inline: false},
		},
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–ª–∞–≤—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ–±–∏—Ä–∞–π –∫—Ä–µ–¥–∏—Ç—ã! üëë | –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–µ—Å–µ–ª—å—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤",
		},
		Timestamp: time.Now().Format(time.RFC3339),
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

package ranking

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/go-redis/redis/v8"
	"google.golang.org/api/option"
	"google.golang.org/api/sheets/v4"
)

// NFT –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É NFT –∏–∑ Google Sheets
type NFT struct {
	ID           string
	Name         string
	Description  string
	ReleaseDate  string
	Rarity       string
	Price        int
	Collection   string
	ImageURL     string
	BasePriceUSD float64   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∏–∑ –º–∞–ø—ã
	LastUpdated  time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
}

// Case –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–µ–π—Å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
type Case struct {
	ID                   string
	Name                 string
	ContainedCollections string
	Price                int
}

// UserInventory —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserInventory map[string]int

// UserCaseInventory —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserCaseInventory map[string]int

// RarityProb –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π
type RarityProb struct {
	Rarity string
	Prob   float64
}

// RarityColors –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π –≤ Discord embed
var RarityColors = map[string]int{
	"Common":     0xFFFFFF,
	"Rare":       0x1E90FF,
	"Super-rare": 0xFFD700,
	"Epic":       0x9932CC,
	"Nephrite":   0x00FF7F,
	"Exotic":     0xFF4500,
	"Legendary":  0xFF0000,
}

// RarityProbabilities –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è
var RarityProbabilities = []RarityProb{
	{"Common", 0.5},
	{"Rare", 0.25},
	{"Super-rare", 0.10},
	{"Epic", 0.05},
	{"Nephrite", 0.01},
	{"Exotic", 0.01},
	{"Legendary", 0.005},
}

// KKI —É–ø—Ä–∞–≤–ª—è–µ—Ç NFT –∏ –∫–µ–π—Å–∞–º–∏
type KKI struct {
	nfts   map[string]NFT
	cases  map[string]Case
	redis  *redis.Client
	ctx    context.Context
	sheets *sheets.Service
	mu     sync.Mutex
}

// NewKKI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç KKI —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Google Sheets –∏ Redis
func NewKKI(ctx context.Context) (*KKI, error) {
	sheetID := os.Getenv("GOOGLE_SHEETS_ID")
	if sheetID == "" {
		return nil, fmt.Errorf("GOOGLE_SHEETS_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	credsPath := os.Getenv("GOOGLE_APPLICATION_CREDENTIALS")
	if credsPath == "" {
		return nil, fmt.Errorf("GOOGLE_APPLICATION_CREDENTIALS –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	srv, err := sheets.NewService(ctx, option.WithCredentialsFile(credsPath))
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Sheets: %v", err)
	}

	k := &KKI{
		nfts:   make(map[string]NFT),
		cases:  make(map[string]Case),
		redis:  redis.NewClient(&redis.Options{Addr: os.Getenv("REDIS_ADDR"), Password: os.Getenv("REDIS_PASSWORD")}),
		ctx:    ctx,
		sheets: srv,
	}
	return k, nil
}

// SyncFromSheets –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –≤ Redis –∏ –ø–∞–º—è—Ç—å
func (k *KKI) SyncFromSheets(r *Ranking) error {
	k.mu.Lock()
	defer k.mu.Unlock()

	// –ó–∞–≥—Ä—É–∑–∫–∞ NFT
	resp, err := k.sheets.Spreadsheets.Values.Get(os.Getenv("GOOGLE_SHEETS_ID"), "NFTs!A:G").Do()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å NFTs: %v", err)
	}

	k.nfts = make(map[string]NFT)
	for i, row := range resp.Values {
		if i == 0 {
			continue
		}
		if len(row) < 7 {
			continue
		}

		rarity := fmt.Sprintf("%v", row[4])
		basePrice, exists := BaseRarityPrices[rarity]
		if !exists {
			log.Printf("Warning: Unknown rarity '%s', using default price 10", rarity)
			basePrice = 10
		}

		nft := NFT{
			ID:           fmt.Sprintf("%v", row[0]),
			Name:         fmt.Sprintf("%v", row[1]),
			Description:  fmt.Sprintf("%v", row[2]),
			ReleaseDate:  fmt.Sprintf("%v", row[3]),
			Rarity:       rarity,
			Collection:   fmt.Sprintf("%v", row[5]),
			ImageURL:     fmt.Sprintf("%v", row[6]),
			BasePriceUSD: basePrice,
		}

		log.Printf("Loaded NFT: %s, Rarity: %s, BasePrice: $%.0f", nft.Name, nft.Rarity, nft.BasePriceUSD)

		// –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
		nft.Price = r.CalculateNFTPrice(nft)
		nft.LastUpdated = time.Now()

		k.nfts[nft.ID] = nft
		jsonData, _ := json.Marshal(nft)
		r.redis.Set(r.ctx, "nft:"+nft.ID, jsonData, 0)
	}

	log.Printf("Total NFTs loaded: %d", len(k.nfts))

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤
	resp, err = k.sheets.Spreadsheets.Values.Get(os.Getenv("GOOGLE_SHEETS_ID"), "Cases!A:D").Do()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Cases: %v", err)
	}

	k.cases = make(map[string]Case)
	for i, row := range resp.Values {
		if i == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		}
		if len(row) < 4 {
			continue
		}
		price, _ := strconv.Atoi(fmt.Sprintf("%v", row[3]))
		kase := Case{
			ID:                   fmt.Sprintf("%v", row[0]),
			Name:                 fmt.Sprintf("%v", row[1]),
			ContainedCollections: fmt.Sprintf("%v", row[2]),
			Price:                price,
		}
		k.cases[kase.ID] = kase
		jsonData, _ := json.Marshal(kase)
		r.redis.Set(r.ctx, "case:"+kase.ID, jsonData, 0)
	}

	return nil
}

// GetUserCaseInventory –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (k *KKI) GetUserCaseInventory(r *Ranking, userID string) UserCaseInventory {
	jsonData, err := r.redis.Get(r.ctx, "case_inventory:"+userID).Bytes()
	if err == redis.Nil {
		return make(UserCaseInventory)
	}
	var inv UserCaseInventory
	if err := json.Unmarshal(jsonData, &inv); err != nil {
		return make(UserCaseInventory)
	}
	return inv
}

// SaveUserCaseInventory —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (k *KKI) SaveUserCaseInventory(r *Ranking, userID string, inv UserCaseInventory) error {
	jsonData, _ := json.Marshal(inv)
	r.redis.Set(r.ctx, "case_inventory:"+userID, jsonData, 0)
	return nil
}

// StartPriceUpdater –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
func (r *Ranking) StartPriceUpdater() {
	go func() {
		ticker := time.NewTicker(15 * time.Minute)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				log.Printf("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω NFT...")

				// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å BTC
				_, err := r.GetBitcoinPrice()
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC: %v", err)
					continue
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö NFT
				r.mu.Lock()
				for id, nft := range r.Kki.nfts {
					newPrice := r.CalculateNFTPrice(nft)
					if newPrice != nft.Price {
						nft.Price = newPrice
						nft.LastUpdated = time.Now()
						r.Kki.nfts[id] = nft

						// –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redis
						jsonData, _ := json.Marshal(nft)
						r.redis.Set(r.ctx, "nft:"+nft.ID, jsonData, 0)
					}
				}
				r.mu.Unlock()

				log.Printf("‚úÖ –¶–µ–Ω—ã NFT –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ –∫—É—Ä—Å—É BTC: $%.2f", r.BitcoinTracker.CurrentPrice)

			case <-r.stopResetChan:
				return
			}
		}
	}()
}

// HandleBitcoinPriceCommand !btc
func (r *Ranking) HandleBitcoinPriceCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	price := r.BitcoinTracker.CurrentPrice
	avgPrice := r.BitcoinTracker.Get24hAverage()
	volatility := r.BitcoinTracker.CalculateVolatility() * 100

	change := ((price - avgPrice) / avgPrice) * 100
	changeEmoji := "‚û°Ô∏è"
	if change > 5 {
		changeEmoji = "üìà"
	}
	if change < -5 {
		changeEmoji = "üìâ"
	}

	embed := &discordgo.MessageEmbed{
		Title: "üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–π–Ω–∞",
		Description: fmt.Sprintf("**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞**: $%.2f %s\n**24—á —Å—Ä–µ–¥–Ω—è—è**: $%.2f\n**–ò–∑–º–µ–Ω–µ–Ω–∏–µ**: %.1f%%\n**–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: %.1f%%",
			price, changeEmoji, avgPrice, change, volatility),
		Color:  0xF7931A,
		Footer: &discordgo.MessageEmbedFooter{Text: "–í–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—ã —Ä–µ–¥–∫–∏—Ö NFT"},
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

// HandlePriceStatsCommand !price_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
func (r *Ranking) HandlePriceStatsCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ NFT
	if len(r.Kki.nfts) == 0 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå **NFT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync_nfts**")
		return
	}

	btcPrice := r.BitcoinTracker.CurrentPrice
	btcAvg := r.BitcoinTracker.Get24hAverage()
	btcVolatility := r.BitcoinTracker.CalculateVolatility() * 100
	btcChange := ((btcPrice - btcAvg) / btcAvg) * 100

	var lines []string
	for _, rarity := range []string{"Common", "Rare", "Super-rare", "Epic", "Nephrite", "Exotic", "Legendary"} {
		// –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π NFT —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
		var exampleNFT *NFT
		for _, nft := range r.Kki.nfts {
			if nft.Rarity == rarity {
				exampleNFT = &nft
				break
			}
		}

		// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ NFT —Ç–∞–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
		if exampleNFT == nil {
			basePrice := BaseRarityPrices[rarity]
			lines = append(lines, fmt.Sprintf("%s **%s**:\n- –ë–∞–∑–æ–≤–∞—è: $%.0f\n- –¢–µ–∫—É—â–∞—è: $%.0f\n- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 0.0%% ‚û°Ô∏è\n- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: %.0f%%",
				RarityEmojis[rarity], rarity, basePrice, basePrice, RarityVolatility[rarity]*100))
			continue
		}

		currentPrice := r.CalculateNFTPrice(*exampleNFT)
		basePrice := exampleNFT.BasePriceUSD

		change := (float64(currentPrice) - basePrice) / basePrice * 100
		emoji := "‚û°Ô∏è"
		if change > 5 {
			emoji = "üìà"
		}
		if change < -5 {
			emoji = "üìâ"
		}
		if math.Abs(change) > 20 {
			emoji = "üöÄ"
		}
		if math.Abs(change) < -20 {
			emoji = "üí•"
		}

		lines = append(lines, fmt.Sprintf("%s **%s**:\n- –ë–∞–∑–æ–≤–∞—è: $%.0f\n- –¢–µ–∫—É—â–∞—è: $%d\n- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: %.1f%% %s\n- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: %.0f%%",
			RarityEmojis[rarity], rarity, basePrice, currentPrice, change, emoji, RarityVolatility[rarity]*100))
	}

	embed := &discordgo.MessageEmbed{
		Title: "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω**",
		Description: fmt.Sprintf("üí∞ **BTC**: $%.2f (Œî %.1f%%, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å %.1f%%)\n\n%s",
			btcPrice, btcChange, btcVolatility, strings.Join(lines, "\n\n")),
		Color:  0x00BFFF,
		Footer: &discordgo.MessageEmbedFooter{Text: "–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç"},
	}
	s.ChannelMessageSendEmbed(m.ChannelID, embed)
}

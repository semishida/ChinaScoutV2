package ranking

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// Card –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ.
type Card struct {
	Suit  string
	Value string
}

// BlackjackGame –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫.
type BlackjackGame struct {
	GameID        string
	PlayerID      string
	Bet           int
	PlayerCards   []Card
	DealerCards   []Card
	Active        bool
	LastActivity  time.Time
	MenuMessageID string
	Color         int
	ChannelID     string
}

// StartBlackjackGame –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫.
func (r *Ranking) StartBlackjackGame(s *discordgo.Session, m *discordgo.MessageCreate) {
	r.mu.Lock()
	gameID := generateGameID(m.Author.ID)
	color := randomColor()
	game := &BlackjackGame{
		GameID:       gameID,
		PlayerID:     m.Author.ID,
		Active:       true,
		LastActivity: time.Now(),
		Color:        color,
		ChannelID:    m.ChannelID,
	}
	r.blackjackGames[gameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ö–∞–∑–∏–Ω–æ: –ë–ª—ç–∫–¥–∂–µ–∫ üé∞",
		Description: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <@%s>! üéâ\n–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n**üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ù–∞–ø–∏—à–∏: `!blackjack <—Å—É–º–º–∞>`", m.Author.ID, r.GetRating(m.Author.ID)),
		Color:       color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ò–≥—Ä–∞–π —Å —É–º–æ–º! üçÄ",
		},
	}
	msg, err := s.ChannelMessageSendEmbed(m.ChannelID, embed)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –±–ª—ç–∫–¥–∂–µ–∫–∞: %v", err)
		return
	}

	r.mu.Lock()
	game.MenuMessageID = msg.ID
	r.mu.Unlock()

	go r.blackjackTimeout(s, gameID)
}

// HandleBlackjackBet –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ.
func (r *Ranking) HandleBlackjackBet(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	parts := strings.Fields(command)
	if len(parts) != 2 {
		r.sendTemporaryReply(s, m, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!blackjack <—Å—É–º–º–∞>`\n–ü—Ä–∏–º–µ—Ä: `!blackjack 50`")
		return
	}

	amount, err := strconv.Atoi(parts[1])
	if err != nil || amount <= 0 {
		r.sendTemporaryReply(s, m, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
		return
	}

	userRating := r.GetRating(m.Author.ID)
	if userRating < amount {
		r.sendTemporaryReply(s, m, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: %d", userRating))
		return
	}

	r.mu.Lock()
	var game *BlackjackGame
	for _, g := range r.blackjackGames {
		if g.PlayerID == m.Author.ID && g.Active && g.Bet == 0 {
			game = g
			break
		}
	}
	if game == nil {
		r.sendTemporaryReply(s, m, "‚ùå –ù–∞—á–Ω–∏ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é `!blackjack`!")
		r.mu.Unlock()
		return
	}

	game.Bet = amount
	game.LastActivity = time.Now()
	r.mu.Unlock()

	r.UpdateRating(m.Author.ID, -amount)

	suits := []string{"‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"}
	values := []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}
	deck := make([]Card, 0, 52)
	for _, suit := range suits {
		for _, value := range values {
			deck = append(deck, Card{Suit: suit, Value: value})
		}
	}
	rand.Shuffle(len(deck), func(i, j int) { deck[i], deck[j] = deck[j], deck[i] })

	playerCards := []Card{deck[0], deck[1]}
	dealerCards := []Card{deck[2], deck[3]}

	r.mu.Lock()
	game.PlayerCards = playerCards
	game.DealerCards = dealerCards
	game.LastActivity = time.Now()
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("<@%s> –Ω–∞—á–∞–ª –∏–≥—Ä—É —Å–æ —Å—Ç–∞–≤–∫–æ–π %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üí∏\n\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞]", m.Author.ID, amount, r.cardsToString(playerCards), r.calculateHand(playerCards), r.cardToString(dealerCards[0])),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–°–¥–µ–ª–∞–π —Ö–æ–¥! üçÄ",
		},
	}
	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{Label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É üÉè", Style: discordgo.PrimaryButton, CustomID: fmt.Sprintf("blackjack_hit_%s", game.GameID)},
				discordgo.Button{Label: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚èπÔ∏è", Style: discordgo.SecondaryButton, CustomID: fmt.Sprintf("blackjack_stand_%s", game.GameID)},
			},
		},
	}

	_, err = s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    m.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫: %v", err)
	}
}

// HandleBlackjackHit –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "–≤–∑—è—Ç—å –∫–∞—Ä—Ç—É".
func (r *Ranking) HandleBlackjackHit(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) < 3 {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomID: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	gameID := strings.Join(parts[2:], "_")

	r.mu.Lock()
	game, exists := r.blackjackGames[gameID]
	if !exists {
		log.Printf("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è GameID: %s", gameID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if !game.Active {
		log.Printf("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è GameID: %s, PlayerID: %s", gameID, game.PlayerID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	deck := r.generateDeck()
	newCard := deck[len(game.PlayerCards)+len(game.DealerCards)]
	game.PlayerCards = append(game.PlayerCards, newCard)
	game.LastActivity = time.Now()
	playerSum := r.calculateHand(game.PlayerCards)

	embed := &discordgo.MessageEmbed{
		Title: "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Color: game.Color,
	}
	var components []discordgo.MessageComponent
	if playerSum > 21 {
		game.Active = false
		embed.Description = fmt.Sprintf("–¢—ã –≤–∑—è–ª –∫–∞—Ä—Ç—É: %s\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è]\n\n‚ùå –ü–µ—Ä–µ–±–æ—Ä! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! üí•", r.cardToString(newCard), r.cardsToString(game.PlayerCards), playerSum, r.cardToString(game.DealerCards[0]))
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–µ –ø–æ–≤–µ–∑–ª–æ! üò¢"}
		components = []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					discordgo.Button{
						Label:    "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üéÆ",
						Style:    discordgo.PrimaryButton,
						CustomID: fmt.Sprintf("blackjack_replay_%s_%s", game.PlayerID, game.MenuMessageID),
					},
				},
			},
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Blackjack (–ø—Ä–æ–∏–≥—Ä—ã—à)
		r.UpdateBJStats(game.PlayerID, false)
		delete(r.blackjackGames, gameID)
	} else {
		embed.Description = fmt.Sprintf("–¢—ã –≤–∑—è–ª –∫–∞—Ä—Ç—É: %s\n**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s [–°–∫—Ä—ã—Ç–∞—è]", r.cardToString(newCard), r.cardsToString(game.PlayerCards), playerSum, r.cardToString(game.DealerCards[0]))
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üçÄ"}
		components = []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					discordgo.Button{Label: "–í–∑—è—Ç—å –∫–∞—Ä—Ç—É üÉè", Style: discordgo.PrimaryButton, CustomID: fmt.Sprintf("blackjack_hit_%s", game.GameID)},
					discordgo.Button{Label: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚èπÔ∏è", Style: discordgo.SecondaryButton, CustomID: fmt.Sprintf("blackjack_stand_%s", game.GameID)},
				},
			},
		}
	}
	r.mu.Unlock()

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª—ç–∫–¥–∂–µ–∫–∞: %v", err)
	}

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

// HandleBlackjackStand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è".
func (r *Ranking) HandleBlackjackStand(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) < 3 {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomID: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	gameID := strings.Join(parts[2:], "_")

	r.mu.Lock()
	game, exists := r.blackjackGames[gameID]
	if !exists {
		log.Printf("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è GameID: %s", gameID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}
	if !game.Active {
		log.Printf("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è GameID: %s, PlayerID: %s", gameID, game.PlayerID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", Flags: discordgo.MessageFlagsEphemeral},
		})
		r.mu.Unlock()
		return
	}

	game.LastActivity = time.Now()
	playerSum := r.calculateHand(game.PlayerCards)
	dealerSum := r.calculateHand(game.DealerCards)

	deck := r.generateDeck()
	cardIndex := len(game.PlayerCards) + len(game.DealerCards)
	for dealerSum < 17 && cardIndex < len(deck) {
		game.DealerCards = append(game.DealerCards, deck[cardIndex])
		dealerSum = r.calculateHand(game.DealerCards)
		cardIndex++
	}

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("**üÉè –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:** %s (–°—É–º–º–∞: %d)\n**üÉè –ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞:** %s (–°—É–º–º–∞: %d)", r.cardsToString(game.PlayerCards), playerSum, r.cardsToString(game.DealerCards), dealerSum),
		Color:       game.Color,
	}

	var result string
	won := false
	if dealerSum > 21 {
		winnings := game.Bet * 2
		r.UpdateRating(game.PlayerID, winnings)
		result = fmt.Sprintf("‚úÖ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –¢—ã –≤—ã–∏–≥—Ä–∞–ª %d –∫—Ä–µ–¥–∏—Ç–æ–≤! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü–æ–±–µ–¥–∞! üèÜ"}
		won = true
	} else if playerSum > dealerSum {
		winnings := game.Bet * 2
		r.UpdateRating(game.PlayerID, winnings)
		result = fmt.Sprintf("‚úÖ –¢—ã –≤—ã–∏–≥—Ä–∞–ª! %d –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ç–≤–æ–∏! üéâ", winnings)
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ü–æ–±–µ–¥–∞! üèÜ"}
		won = true
	} else if playerSum == dealerSum {
		r.UpdateRating(game.PlayerID, game.Bet)
		result = "ü§ù –ù–∏—á—å—è! –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. üîÑ"
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–∏—á—å—è! ü§ù"}
	} else {
		result = "‚ùå –î–∏–ª–µ—Ä –ø–æ–±–µ–¥–∏–ª! üí•"
		embed.Footer = &discordgo.MessageEmbedFooter{Text: "–ù–µ –ø–æ–≤–µ–∑–ª–æ! üò¢"}
	}

	embed.Description += fmt.Sprintf("\n\n%s", result)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Blackjack
	r.UpdateBJStats(game.PlayerID, won)

	components := []discordgo.MessageComponent{
		discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üéÆ",
					Style:    discordgo.PrimaryButton,
					CustomID: fmt.Sprintf("blackjack_replay_%s_%s", game.PlayerID, game.MenuMessageID),
				},
			},
		},
	}

	game.Active = false
	delete(r.blackjackGames, gameID)
	r.mu.Unlock()

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         game.MenuMessageID,
		Embed:      embed,
		Components: &components,
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª—ç–∫–¥–∂–µ–∫–∞: %v", err)
	}

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

// HandleBlackjackReplay –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫.
func (r *Ranking) HandleBlackjackReplay(s *discordgo.Session, i *discordgo.InteractionCreate) {
	parts := strings.Split(i.MessageComponentData().CustomID, "_")
	if len(parts) != 4 {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CustomID: %s", i.MessageComponentData().CustomID)
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{Content: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏!", Flags: discordgo.MessageFlagsEphemeral},
		})
		return
	}
	playerID := parts[2]
	menuMessageID := parts[3]

	newGameID := generateGameID(playerID)
	newColor := randomColor()
	game := &BlackjackGame{
		GameID:        newGameID,
		PlayerID:      playerID,
		Active:        true,
		LastActivity:  time.Now(),
		Color:         newColor,
		ChannelID:     i.ChannelID,
		MenuMessageID: menuMessageID,
	}

	r.mu.Lock()
	r.blackjackGames[newGameID] = game
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ö–∞–∑–∏–Ω–æ: –ë–ª—ç–∫–¥–∂–µ–∫ üé∞",
		Description: fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <@%s>! üéâ\n–°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n**üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:** %d –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n–ù–∞–ø–∏—à–∏: `!blackjack <—Å—É–º–º–∞>`", playerID, r.GetRating(playerID)),
		Color:       newColor,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ò–≥—Ä–∞–π —Å —É–º–æ–º! üçÄ",
		},
	}

	_, err := s.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Channel:    i.ChannelID,
		ID:         menuMessageID,
		Embed:      embed,
		Components: &[]discordgo.MessageComponent{},
	})
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –±–ª—ç–∫–¥–∂–µ–∫–∞: %v", err)
	}

	go r.blackjackTimeout(s, newGameID)

	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{Type: discordgo.InteractionResponseDeferredMessageUpdate})
}

// HandleEndBlackjackCommand –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
func (r *Ranking) HandleEndBlackjackCommand(s *discordgo.Session, m *discordgo.MessageCreate, command string) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ !endblackjack: %s –æ—Ç %s", command, m.Author.ID)

	if !r.IsAdmin(m.Author.ID) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏–≥—Ä—ã! üîí")
		return
	}

	parts := strings.Fields(command)
	if len(parts) != 2 {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!endblackjack @id`")
		return
	}

	targetID := strings.TrimPrefix(parts[1], "<@")
	targetID = strings.TrimSuffix(targetID, ">")
	targetID = strings.TrimPrefix(targetID, "!")

	r.mu.Lock()
	var game *BlackjackGame
	for _, g := range r.blackjackGames {
		if g.PlayerID == targetID && g.Active {
			game = g
			break
		}
	}
	if game == nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ –±–ª—ç–∫–¥–∂–µ–∫! ‚ô†Ô∏è")
		r.mu.Unlock()
		return
	}

	game.Active = false
	delete(r.blackjackGames, game.GameID)
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º: <@%s>! üö´", targetID),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üî¥",
		},
	}
	_, err := s.ChannelMessageEditEmbed(game.ChannelID, game.MenuMessageID, embed)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª—ç–∫–¥–∂–µ–∫–∞: %v", err)
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‚úÖ –ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫ –¥–ª—è <@%s> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", targetID))
	log.Printf("–ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫ –¥–ª—è %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º %s", targetID, m.Author.ID)
}

// blackjackTimeout –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.
func (r *Ranking) blackjackTimeout(s *discordgo.Session, gameID string) {
	time.Sleep(15 * time.Minute)
	r.mu.Lock()
	game, exists := r.blackjackGames[gameID]
	if !exists || !game.Active {
		r.mu.Unlock()
		return
	}
	game.Active = false
	delete(r.blackjackGames, gameID)
	r.mu.Unlock()

	embed := &discordgo.MessageEmbed{
		Title:       "‚ô†Ô∏è –ë–ª—ç–∫–¥–∂–µ–∫ üé≤",
		Description: fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, <@%s>! –í—Ä–µ–º—è –≤—ã—à–ª–æ! ‚è∞", game.PlayerID),
		Color:       game.Color,
		Footer: &discordgo.MessageEmbedFooter{
			Text: "–í—Ä–µ–º—è –≤—ã—à–ª–æ! üò¢",
		},
	}
	_, err := s.ChannelMessageEditEmbed(game.ChannelID, game.MenuMessageID, embed)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª—ç–∫–¥–∂–µ–∫–∞ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: %v", err)
	}
}

// generateDeck —Å–æ–∑–¥–∞—ë—Ç –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç.
func (r *Ranking) generateDeck() []Card {
	suits := []string{"‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"}
	values := []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}
	deck := make([]Card, 0, 52)
	for _, suit := range suits {
		for _, value := range values {
			deck = append(deck, Card{Suit: suit, Value: value})
		}
	}
	rand.Shuffle(len(deck), func(i, j int) { deck[i], deck[j] = deck[j], deck[i] })
	return deck
}

// calculateHand –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –æ—á–∫–æ–≤ —Ä—É–∫–∏.
func (r *Ranking) calculateHand(cards []Card) int {
	sum := 0
	aces := 0
	for _, card := range cards {
		switch card.Value {
		case "A":
			aces++
		case "J", "Q", "K":
			sum += 10
		default:
			val, _ := strconv.Atoi(card.Value)
			sum += val
		}
	}
	for i := 0; i < aces; i++ {
		if sum+11 <= 21 {
			sum += 11
		} else {
			sum += 1
		}
	}
	return sum
}

// cardsToString –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –≤ —Å—Ç—Ä–æ–∫—É.
func (r *Ranking) cardsToString(cards []Card) string {
	var result []string
	for _, card := range cards {
		result = append(result, card.Suit+card.Value)
	}
	return strings.Join(result, ", ")
}

// cardToString –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É –≤ —Å—Ç—Ä–æ–∫—É.
func (r *Ranking) cardToString(card Card) string {
	return card.Suit + card.Value
}

// sendTemporaryReply –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
func (r *Ranking) sendTemporaryReply(s *discordgo.Session, m *discordgo.MessageCreate, content string) {
	msg, err := s.ChannelMessageSend(m.ChannelID, content)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		return
	}
	time.Sleep(10 * time.Second)
	s.ChannelMessageDelete(m.ChannelID, msg.ID)
}
